# -*- coding: utf-8 -*-
from header_common import *
from header_operations import *
from header_parties import *
from header_items import *
from header_skills import *
from header_triggers import *
from header_troops import *

from module_constants import *

####################################################################################################################
#  Each trigger contains the following fields:
# 1) Check interval: How frequently this trigger will be checked
# 2) Delay interval: Time to wait before applying the consequences of the trigger
#    After its conditions have been evaluated as true.
# 3) Re-arm interval. How much time must pass after applying the consequences of the trigger for the trigger to become active again.
#    You can put the constant ti_once here to make sure that the trigger never becomes active again after it fires once.
# 4) Conditions block (list). This must be a valid operation block. See header_operations.py for reference.
#    Every time the trigger is checked, the conditions block will be executed.
#    If the conditions block returns true, the consequences block will be executed.
#    If the conditions block is empty, it is assumed that it always evaluates to true.
# 5) Consequences block (list). This must be a valid operation block. See header_operations.py for reference. 
####################################################################################################################

# Some constants for use below
merchant_inventory_space = 30
num_merchandise_goods = 36



triggers = [
	(0,12.2,0,[(eq, "$Kochanka",2)],[
	(eq, "$Kochanka",2),
	(troop_get_slot, ":id","trp_lovers","$Lovers"),
	(troop_get_slot, ":troop","trp_group_troop",":id"),
	(troop_get_slot, ":dna","trp_dna",":id"),
	
	(1,"script_setup_troop_meeting",":troop",":dna"),
	]),
	(0,6,0,[(eq, "$Kochanka",2)],[
	(eq, "$Kochanka",2),
	(store_random_in_range, ":r",0,10),
	(lt,":r",3),
	(assign, "$Kochanka",3),
	(troop_get_slot, ":id","trp_lovers","$Lovers"),
	(troop_get_slot, ":troop","trp_group_troop",":id"),
	(troop_get_slot, ":dna","trp_dna",":id"),
	
	(1,"script_setup_troop_meeting",":troop",":dna"),
	]),
# Tutorial:
  (0.1, 0, ti_once, [(map_free,0)], [(dialog_box,"str_tutorial_map1")]),

# Refresh Merchants
  (0.0, 0, 168.0, [],
  [    
    (call_script, "script_refresh_center_inventories"),
  ]),

# Refresh Armor sellers
  (0.0, 0, 168.0, [],
  [    
    (call_script, "script_refresh_center_armories"),
  ]),

# Refresh Weapon sellers
  (0.0, 0, 168.0, [],
  [
    (call_script, "script_refresh_center_weaponsmiths"),
  ]),

# Refresh Horse sellers
  (0.0, 0, 168.0, [],
  [
    (call_script, "script_refresh_center_stables"),
  ]),
  

#############

#Captivity:

#  (1.0, 0, 0.0, [],
#   [
#       (ge,"$captivity_mode",1),
#       (store_current_hours,reg(1)),
#       (val_sub,reg(1),"$captivity_end_time"),
#       (ge,reg(1),0),
#       (display_message,"str_nobleman_reached_destination"),
#       (jump_to_menu,"$captivity_end_menu"),
#    ]),



  (0.9,5,0,[
	(check_quest_active, "qst_Kurland"),
	(quest_slot_eq, "qst_Kurland", slot_quest_current_state, 1),
  ],
  [
	(rest_for_hours,0,0,0),
	(assign, ":old" ,"$ignore_special"),
	(assign, "$ignore_special",0),
	(1,"script_create_kingdom_hero_party", "trp_knight_5_11", "p_karczma_o"),
	(assign, "$ignore_special",":old"),
	(quest_get_slot, ":party", "qst_Kurland", slot_quest_target_party),
	(1,"script_party_set_ai_state", "$pout_party",spai_besieging_center, ":party"),
	(assign, reg0, "$pout_party"),
	(assign, reg1, ":party"),
	# (display_message, "@DEBUG {reg0} {reg1}", 0x007f7f),
	(troop_set_slot, "trp_knight_5_11", GrupaAtaku, ":party"),
	(quest_set_slot, "qst_Kurland", slot_quest_current_state, 2),
	(assign, "$Knight511",1),
  ]),

  (0,7.8,0,[
  # (assign, reg0, "$Manifest"),
  # (display_message, "@Manifest: {reg0}"),
  (gt, "$Manifest",0),
  (rest_for_hours,8,5,1),
  # (display_message, "@1"),
  ],[
	(rest_for_hours,0,0,0),
	# (display_message, "@2"),
	(try_begin),
		(quest_slot_eq, "qst_Manifesty", QuestSlot+0, "$Manifest"),
		(quest_set_slot, "qst_Manifesty", QuestSlot+0, 0),
		(party_set_flags, "p_qmanifest1", pf_disabled, 1),
		(display_message, "@Wygłosiłeś manifest",0x007f00),
	(else_try),
		(quest_slot_eq, "qst_Manifesty", QuestSlot+1, "$Manifest"),
		(party_set_flags, "p_qmanifest2", pf_disabled, 1),
		(quest_set_slot, "qst_Manifesty", QuestSlot+1, 0),
		(display_message, "@Wygłosiłeś manifest",0x007f00),
	# (else_try),
		# (display_message, "@DEBUG: Error, zglos mi to",0xd42121),
	(try_end),
	(assign, "$Manifest",0),
	(quest_slot_eq, "qst_Manifesty", QuestSlot+0, 0),
	(quest_slot_eq, "qst_Manifesty", QuestSlot+1, 0),
	(1,"script_2Etap_quest_succeed", "qst_Manifesty"),
	# (1,"script_end_quest", "qst_Manifesty"),
  ]),


  (0,23.8,0,[
  # (gt, "$Uniwersal",0),
  # (rest_for_hours,24,5,1),
  ],[
  # (rest_for_hours,0,0,0),
  
  # (try_begin),
    # (quest_slot_eq, "qst_Uniwersal", QuestSlot+0, "$Uniwersal"),
    # (quest_set_slot, "qst_Uniwersal", QuestSlot+0, 0),
    # (party_set_flags, "p_quniwersal1", pf_disabled, 1),
    # (party_set_flags, "$Uniwersal", pf_disabled, 1),
    # (display_message, "@Uniwersał został wygłoszony!",0x007f00),
  # (else_try),
    # (quest_slot_eq, "qst_Uniwersal", QuestSlot+1, "$Uniwersal"),
    # (party_set_flags, "p_quniwersal2", pf_disabled, 1),
    # (quest_set_slot, "qst_Uniwersal", QuestSlot+1, 0),
    # (party_set_flags, "$Uniwersal", pf_disabled, 1),
    # (display_message, "@Uniwersał został wygłoszony!",0x007f00),
  # (else_try),
    # (quest_slot_eq, "qst_Uniwersal", QuestSlot+2, "$Uniwersal"),
    # (party_set_flags, "p_quniwersal3", pf_disabled, 1),
    # (quest_set_slot, "qst_Uniwersal", QuestSlot+2, 0),
    # (party_set_flags, "$Uniwersal", pf_disabled, 1),
    # (display_message, "@Uniwersał został wygłoszony!",0x007f00),
  # (try_end),
  # (assign, "$Uniwersal",0),
  # (quest_slot_eq, "qst_Uniwersal", QuestSlot+0, 0),
  # (quest_slot_eq, "qst_Uniwersal", QuestSlot+1, 0),
  # (quest_slot_eq, "qst_Uniwersal", QuestSlot+2, 0),
  # (1,"script_3Etap_quest_succeed", "qst_Uniwersal"),
  ]),

  (0,48,0,[
  (eq, "$Prolog",13),
  ],[
	(rest_for_hours,0,1,0),
	(quest_set_slot, "qst_gList",slot_quest_current_state, 6),
	(jump_to_menu, "mnu_gList_prison2"),
	(assign, "$talkto","trp_tukaj"),
  ]),

  (5.7, 0, ti_once, 
  [
    # (store_num_parties_of_template, reg2, "pt_manhunters"),    
    # (lt, reg2, 4)
  ],
  [
    # (set_spawn_radius, 1),
    # (store_add, ":p_town_22_plus_one", "p_town_22", 1),
    # (store_random_in_range, ":selected_town", "p_town_1", ":p_town_22_plus_one"),
    # (spawn_around_party, ":selected_town", "pt_manhunters"),
  ]),



  (1.0, 0.0, 0.0, [
  (check_quest_active, "qst_track_down_bandits"),
  (neg|check_quest_failed, "qst_track_down_bandits"),
  (neg|check_quest_succeeded, "qst_track_down_bandits"),
  
  ],
   [
    (quest_get_slot, ":bandit_party", "qst_track_down_bandits", slot_quest_target_party),
	(try_begin),
		(party_is_active, ":bandit_party"),
		(store_faction_of_party, ":bandit_party_faction", ":bandit_party"),
		(neg|is_between, ":bandit_party_faction", kingdoms_begin, kingdoms_end), #ie, the party has not respawned as a non-bandit
		
		
		(assign, ":spot_range", 8),
		(try_begin),
			(is_currently_night),
			(assign, ":spot_range", 5),
		(try_end),
		
		(try_for_parties, ":party"),
			(gt, ":party", "p_spawn_points_end"),
			
			(store_faction_of_party, ":faction", ":party"),
			(is_between, ":faction", kingdoms_begin, kingdoms_end),
			
			
			(store_distance_to_party_from_party, ":distance", ":party", ":bandit_party"),
			(lt, ":distance", ":spot_range"),
			(try_begin),
				(eq, "$cheat_mode", 1),
				(str_store_party_name, s4, ":party"),
				(display_message, "@{!}DEBUG -- Wanted bandits spotted by {s4}"),
			(try_end),
			
			(call_script, "script_get_closest_center", ":bandit_party"),
			(assign, ":nearest_center", reg0),
#			(try_begin),
#				(get_party_ai_current_behavior, ":behavior", ":party"),
#				(eq, ":behavior", ai_bhvr_attack_party),
#				(call_script, "script_add_log_entry",  logent_party_chases_wanted_bandits, ":party",  ":nearest_center", ":bandit_party", -1),
#			(else_try),
#				(eq, ":behavior", ai_bhvr_avoid_party),
#				(call_script, "script_add_log_entry",  logent_party_runs_from_wanted_bandits, ":party",  ":nearest_center", ":bandit_party", -1),
#			(else_try),
			(call_script, "script_add_log_entry",  logent_party_spots_wanted_bandits, ":party",  ":nearest_center", ":bandit_party", -1),
#			(try_end),
		(try_end),
	(else_try), #Party not found
		(display_message, "str_bandits_eliminated_by_another"),
        (call_script, "script_abort_quest", "qst_track_down_bandits", 0),
	(try_end),
   ]),


#Tax Collectors
# Prisoner Trains
#  (4.1, 0, 0.0, [],
#                     [
#                         (assign, "$pin_faction", "fac_swadians"),
#                         (assign, "$pin_party_template", "pt_swadian_prisoner_train"),
#                         (assign, "$pin_limit", peak_prisoner_trains),
#                         (call_script,"script_cf_spawn_party_at_faction_town_if_below_limit"),
#                         (party_set_ai_behavior,"$pout_party",ai_bhvr_travel_to_party),
#                         (party_set_ai_object,"$pout_party","$pout_town"),
#                    ]),
#
#  (4.1, 0, 0.0, [],
#                     [
#                         (assign, "$pin_faction", "fac_vaegirs"),
#                         (assign, "$pin_party_template", "pt_vaegir_prisoner_train"),
#                         (assign, "$pin_limit", peak_prisoner_trains),
#                         (call_script,"script_cf_spawn_party_at_faction_town_if_below_limit"),
#                         (party_set_ai_behavior,"$pout_party",ai_bhvr_travel_to_party),
#                         (party_set_ai_object,"$pout_party","$pout_town"),
#                    ]),

  # (2.0, 0, 0, [(store_random_party_of_template, reg(2), "pt_prisoner_train_party"),
               # (party_is_in_any_town,reg(2)),
               # ],
              # [(store_faction_of_party, ":faction_no", reg(2)),
               # (call_script,"script_cf_select_random_walled_center_with_faction", ":faction_no", -1),
               # (party_set_ai_behavior,reg(2),ai_bhvr_travel_to_party),
               # (party_set_ai_object,reg(2),reg0),
               # (party_set_flags, reg(2), pf_default_behavior, 0),
            # ]),

##Caravans
#  (4.2, 0, 0.0, [],
#                     [
#                         (assign, "$pin_faction", "fac_swadians"),
#                         (assign, "$pin_party_template", "pt_swadian_caravan"),
#                         (assign, "$pin_limit", peak_kingdom_caravans),
#                         (call_script,"script_cf_spawn_party_at_faction_town_if_below_limit"),
#                         (party_set_ai_behavior,"$pout_party",ai_bhvr_travel_to_party),
#                         (party_set_ai_object,"$pout_party","$pout_town"),
#                    ]),

#  (4.2, 0, 0.0, [],
#                     [
#                         (assign, "$pin_faction", "fac_vaegirs"),
#                         (assign, "$pin_party_template", "pt_vaegir_caravan"),
#                         (assign, "$pin_limit", peak_kingdom_caravans),
#                         (call_script,"script_cf_spawn_party_at_faction_town_if_below_limit"),
#                         (party_set_ai_behavior,"$pout_party",ai_bhvr_travel_to_party),
#                         (party_set_ai_object,"$pout_party","$pout_town"),
#                    ]),

##  (2.0, 0, 0, [(store_random_party_of_template, reg(2), "pt_kingdom_caravan_party"),
##               (party_is_in_any_town,reg(2)),
##               ],
##              [(store_faction_of_party, ":faction_no", reg(2)),
##               (call_script,"script_cf_select_random_town_with_faction", ":faction_no"),
##               (party_set_ai_behavior,reg(2),ai_bhvr_travel_to_party),
##               (party_set_ai_object,reg(2),reg0),
##               (party_set_flags, reg(2), pf_default_behavior, 0),
##            ]),
  
  # (4.0, 0, 0.0,
   # [
     # (eq, "$caravan_escort_state", 1), #cancel caravan_escort_state if caravan leaves the destination
     # (assign, ":continue", 0),
     # (try_begin),
       # (neg|party_is_active, "$caravan_escort_party_id"),
       # (assign, ":continue", 1),
     # (else_try),
       # (get_party_ai_object, ":ai_object", "$caravan_escort_party_id"),
       # (neq, ":ai_object", "$caravan_escort_destination_town"),
       # (assign, ":continue", 1),
     # (try_end),
     # (eq, ":continue", 1),
     # ],
   # [
     # (assign, "$caravan_escort_state", 0),
     # ]),

#Messengers
#  (4.2, 0, 0.0, [],
#   [(assign, "$pin_faction", "fac_swadians"),
#    (assign, "$pin_party_template", "pt_swadian_messenger"),
#    (assign, "$pin_limit", peak_kingdom_messengers),
#    (call_script,"script_cf_spawn_party_at_faction_town_if_below_limit"),
#    (party_set_ai_behavior,"$pout_party",ai_bhvr_travel_to_party),
#    (party_set_ai_object,"$pout_party","$pout_town"),
#    ]),

#  (4.2, 0, 0.0, [],
#   [(assign, "$pin_faction", "fac_vaegirs"),
#    (assign, "$pin_party_template", "pt_vaegir_messenger"),
#    (assign, "$pin_limit", peak_kingdom_caravans),
#    (call_script,"script_cf_spawn_party_at_faction_town_if_below_limit"),
#    (party_set_ai_behavior,"$pout_party",ai_bhvr_travel_to_party),
#    (party_set_ai_object,"$pout_party","$pout_town"),
#    ]),

  # (1.5, 0, 0, [(store_random_party_of_template, reg(2), "pt_messenger_party"),
               # (party_is_in_any_town,reg(2)),
               # ],
   # [(store_faction_of_party, ":faction_no", reg(2)),
    # (call_script,"script_cf_select_random_walled_center_with_faction", ":faction_no", -1),
    # (party_set_ai_behavior,reg(2),ai_bhvr_travel_to_party),
    # (party_set_ai_object,reg(2),reg0),
    # (party_set_flags, reg(2), pf_default_behavior, 0),
    # ]),
  
  

###########################################################################
### Random Governer Quest triggers
###########################################################################

# Runaway Peasants quest
  (0.2, 0.0, 0.0,
   [
       (check_quest_active, "qst_bring_back_runaway_serfs"),
       (neg|check_quest_concluded, "qst_bring_back_runaway_serfs"),
       (quest_get_slot, ":quest_object_center", "qst_bring_back_runaway_serfs", slot_quest_object_center),
       (quest_get_slot, ":quest_target_center", "qst_bring_back_runaway_serfs", slot_quest_target_center),
       (try_begin),
         (party_is_active, "$qst_bring_back_runaway_serfs_party_1"),
         (try_begin),
           (party_is_in_town, "$qst_bring_back_runaway_serfs_party_1", ":quest_target_center"),
           (remove_party, "$qst_bring_back_runaway_serfs_party_1"),
           (val_add, "$qst_bring_back_runaway_serfs_num_parties_fleed", 1),
         (else_try),
           (party_is_in_town, "$qst_bring_back_runaway_serfs_party_1", ":quest_object_center"),
           (remove_party, "$qst_bring_back_runaway_serfs_party_1"),
           (val_add, "$qst_bring_back_runaway_serfs_num_parties_returned", 1),
         (else_try),
           (store_distance_to_party_from_party, ":cur_distance", "p_main_party", "$qst_bring_back_runaway_serfs_party_1"),
           (gt, ":cur_distance", 3),
           (party_set_ai_object, "$qst_bring_back_runaway_serfs_party_1", ":quest_target_center"),
         (try_end),
       (try_end),
       (try_begin),
         (party_is_active, "$qst_bring_back_runaway_serfs_party_2"),
         (try_begin),
           (party_is_in_town, "$qst_bring_back_runaway_serfs_party_2", ":quest_target_center"),
           (remove_party, "$qst_bring_back_runaway_serfs_party_2"),
           (val_add, "$qst_bring_back_runaway_serfs_num_parties_fleed", 1),
         (else_try),
           (party_is_in_town, "$qst_bring_back_runaway_serfs_party_2", ":quest_object_center"),
           (remove_party, "$qst_bring_back_runaway_serfs_party_2"),
           (val_add, "$qst_bring_back_runaway_serfs_num_parties_returned", 1),
         (else_try),
           (store_distance_to_party_from_party, ":cur_distance", "p_main_party", "$qst_bring_back_runaway_serfs_party_2"),
           (gt, ":cur_distance", 3),
           (party_set_ai_object, "$qst_bring_back_runaway_serfs_party_2", ":quest_target_center"),
         (try_end),
       (try_end),
       (try_begin),
         (party_is_active, "$qst_bring_back_runaway_serfs_party_3"),
         (try_begin),
           (party_is_in_town, "$qst_bring_back_runaway_serfs_party_3", ":quest_target_center"),
           (remove_party, "$qst_bring_back_runaway_serfs_party_3"),
           (val_add, "$qst_bring_back_runaway_serfs_num_parties_fleed", 1),
         (else_try),
           (party_is_in_town, "$qst_bring_back_runaway_serfs_party_3", ":quest_object_center"),
           (remove_party, "$qst_bring_back_runaway_serfs_party_3"),
           (val_add, "$qst_bring_back_runaway_serfs_num_parties_returned", 1),
         (else_try),
           (store_distance_to_party_from_party, ":cur_distance", "p_main_party", "$qst_bring_back_runaway_serfs_party_3"),
           (gt, ":cur_distance", 3),
           (party_set_ai_object, "$qst_bring_back_runaway_serfs_party_3", ":quest_target_center"),
         (try_end),
       (try_end),
       (assign, ":sum_removed", "$qst_bring_back_runaway_serfs_num_parties_returned"),
       (val_add, ":sum_removed", "$qst_bring_back_runaway_serfs_num_parties_fleed"),
       (ge, ":sum_removed", 3),
       (try_begin),
         (ge, "$qst_bring_back_runaway_serfs_num_parties_returned", 3),
         (call_script, "script_succeed_quest", "qst_bring_back_runaway_serfs"),
       (else_try),
         (eq, "$qst_bring_back_runaway_serfs_num_parties_returned", 0),
         (call_script, "script_fail_quest", "qst_bring_back_runaway_serfs"),
       (else_try),
         (call_script, "script_conclude_quest", "qst_bring_back_runaway_serfs"),
       (try_end),
    ],
   []
   ),
### Defend Nobles Against Peasants quest
##  (0.2, 0.0, 0.0,
##   [
##       (check_quest_active, "qst_defend_nobles_against_peasants"),
##       (neg|check_quest_succeeded, "qst_defend_nobles_against_peasants"),
##       (neg|check_quest_failed, "qst_defend_nobles_against_peasants"),
##       (quest_get_slot, ":quest_target_center", "qst_defend_nobles_against_peasants", slot_quest_target_center),
##       (assign, ":num_active_parties", 0),
##       (try_begin),
##         (gt, "$qst_defend_nobles_against_peasants_noble_party_1", 0),
##         (party_is_active, "$qst_defend_nobles_against_peasants_noble_party_1"),
##         (val_add, ":num_active_parties", 1),
##         (party_is_in_town, "$qst_defend_nobles_against_peasants_noble_party_1", ":quest_target_center"),
##         (remove_party, "$qst_defend_nobles_against_peasants_noble_party_1"),
##         (party_get_num_companions, ":num_companions", "$qst_defend_nobles_against_peasants_noble_party_1"),
##         (val_add, "$qst_defend_nobles_against_peasants_num_nobles_saved", ":num_companions"),
##       (try_end),
##       (try_begin),
##         (gt, "$qst_defend_nobles_against_peasants_noble_party_2", 0),
##         (party_is_active, "$qst_defend_nobles_against_peasants_noble_party_2"),
##         (val_add, ":num_active_parties", 1),
##         (party_is_in_town, "$qst_defend_nobles_against_peasants_noble_party_2", ":quest_target_center"),
##         (remove_party, "$qst_defend_nobles_against_peasants_noble_party_2"),
##         (party_get_num_companions, ":num_companions", "$qst_defend_nobles_against_peasants_noble_party_2"),
##         (val_add, "$qst_defend_nobles_against_peasants_num_nobles_saved", ":num_companions"),
##       (try_end),
##       (try_begin),
##         (gt, "$qst_defend_nobles_against_peasants_noble_party_3", 0),
##         (party_is_active, "$qst_defend_nobles_against_peasants_noble_party_3"),
##         (val_add, ":num_active_parties", 1),
##         (party_is_in_town, "$qst_defend_nobles_against_peasants_noble_party_3", ":quest_target_center"),
##         (remove_party, "$qst_defend_nobles_against_peasants_noble_party_3"),
##         (party_get_num_companions, ":num_companions", "$qst_defend_nobles_against_peasants_noble_party_3"),
##         (val_add, "$qst_defend_nobles_against_peasants_num_nobles_saved", ":num_companions"),
##       (try_end),
##       (try_begin),
##         (gt, "$qst_defend_nobles_against_peasants_noble_party_4", 0),
##         (party_is_active, "$qst_defend_nobles_against_peasants_noble_party_4"),
##         (val_add, ":num_active_parties", 1),
##         (party_is_in_town, "$qst_defend_nobles_against_peasants_noble_party_4", ":quest_target_center"),
##         (remove_party, "$qst_defend_nobles_against_peasants_noble_party_4"),
##         (party_get_num_companions, ":num_companions", "$qst_defend_nobles_against_peasants_noble_party_4"),
##         (val_add, "$qst_defend_nobles_against_peasants_num_nobles_saved", ":num_companions"),
##       (try_end),
##       (try_begin),
##         (gt, "$qst_defend_nobles_against_peasants_noble_party_5", 0),
##         (party_is_active, "$qst_defend_nobles_against_peasants_noble_party_5"),
##         (val_add, ":num_active_parties", 1),
##         (party_is_in_town, "$qst_defend_nobles_against_peasants_noble_party_5", ":quest_target_center"),
##         (remove_party, "$qst_defend_nobles_against_peasants_noble_party_5"),
##         (party_get_num_companions, ":num_companions", "$qst_defend_nobles_against_peasants_noble_party_5"),
##         (val_add, "$qst_defend_nobles_against_peasants_num_nobles_saved", ":num_companions"),
##       (try_end),
##       (try_begin),
##         (gt, "$qst_defend_nobles_against_peasants_noble_party_6", 0),
##         (party_is_active, "$qst_defend_nobles_against_peasants_noble_party_6"),
##         (val_add, ":num_active_parties", 1),
##         (party_is_in_town, "$qst_defend_nobles_against_peasants_noble_party_6", ":quest_target_center"),
##         (remove_party, "$qst_defend_nobles_against_peasants_noble_party_6"),
##         (party_get_num_companions, ":num_companions", "$qst_defend_nobles_against_peasants_noble_party_6"),
##         (val_add, "$qst_defend_nobles_against_peasants_num_nobles_saved", ":num_companions"),
##       (try_end),
##       (try_begin),
##         (gt, "$qst_defend_nobles_against_peasants_noble_party_7", 0),
##         (party_is_active, "$qst_defend_nobles_against_peasants_noble_party_7"),
##         (val_add, ":num_active_parties", 1),
##         (party_is_in_town, "$qst_defend_nobles_against_peasants_noble_party_7", ":quest_target_center"),
##         (remove_party, "$qst_defend_nobles_against_peasants_noble_party_7"),
##         (party_get_num_companions, ":num_companions", "$qst_defend_nobles_against_peasants_noble_party_7"),
##         (val_add, "$qst_defend_nobles_against_peasants_num_nobles_saved", ":num_companions"),
##       (try_end),
##       (try_begin),
##         (gt, "$qst_defend_nobles_against_peasants_noble_party_8", 0),
##         (party_is_active, "$qst_defend_nobles_against_peasants_noble_party_8"),
##         (val_add, ":num_active_parties", 1),
##         (party_is_in_town, "$qst_defend_nobles_against_peasants_noble_party_8", ":quest_target_center"),
##         (remove_party, "$qst_defend_nobles_against_peasants_noble_party_8"),
##         (party_get_num_companions, ":num_companions", "$qst_defend_nobles_against_peasants_noble_party_8"),
##         (val_add, "$qst_defend_nobles_against_peasants_num_nobles_saved", ":num_companions"),
##       (try_end),
##       (eq, ":num_active_parties", 0),
##       (try_begin),
##         (store_div, ":limit", "$qst_defend_nobles_against_peasants_num_nobles_to_save", 2),
##         (ge, "$qst_defend_nobles_against_peasants_num_nobles_saved", ":limit"),
##         (call_script, "script_succeed_quest", "qst_defend_nobles_against_peasants"),
##       (else_try),
##         (call_script, "script_fail_quest", "qst_defend_nobles_against_peasants"),
##       (try_end),
##    ],
##   []
##   ),
### Capture Conspirators quest
##  (0.15, 0.0, 0.0,
##   [
##       (check_quest_active, "qst_capture_conspirators"),
##       (neg|check_quest_succeeded, "qst_capture_conspirators"),
##       (neg|check_quest_failed, "qst_capture_conspirators"),
##       (quest_get_slot, ":quest_target_center", "qst_capture_conspirators", slot_quest_target_center),
##       (quest_get_slot, ":faction_no", "qst_capture_conspirators", slot_quest_target_faction),
##       (try_begin),
##         (gt, "$qst_capture_conspirators_num_parties_to_spawn", "$qst_capture_conspirators_num_parties_spawned"),
##         (store_random_in_range, ":random_no", 0, 100),
##         (lt, ":random_no", 20),
##         (set_spawn_radius, 3),
##         (spawn_around_party,":quest_target_center","pt_conspirator"),
##         (val_add, "$qst_capture_conspirators_num_parties_spawned", 1),
##         (party_get_num_companions, ":num_companions", reg0),
##         (val_add, "$qst_capture_conspirators_num_troops_to_capture", ":num_companions"),
##         (party_set_ai_behavior, reg0, ai_bhvr_travel_to_party),
##         (party_set_ai_object, reg0, "$qst_capture_conspirators_party_1"),
##         (party_set_flags, reg0, pf_default_behavior, 0),
##         (try_begin),
##           (le, "$qst_capture_conspirators_party_2", 0),
##           (assign, "$qst_capture_conspirators_party_2", reg0),
##         (else_try),
##           (le, "$qst_capture_conspirators_party_3", 0),
##           (assign, "$qst_capture_conspirators_party_3", reg0),
##         (else_try),
##           (le, "$qst_capture_conspirators_party_4", 0),
##           (assign, "$qst_capture_conspirators_party_4", reg0),
##         (else_try),
##           (le, "$qst_capture_conspirators_party_5", 0),
##           (assign, "$qst_capture_conspirators_party_5", reg0),
##         (else_try),
##           (le, "$qst_capture_conspirators_party_6", 0),
##           (assign, "$qst_capture_conspirators_party_6", reg0),
##         (else_try),
##           (le, "$qst_capture_conspirators_party_7", 0),
##           (assign, "$qst_capture_conspirators_party_7", reg0),
##         (try_end),
##       (try_end),
##
##       (assign, ":num_active_parties", 0),
##
##       (try_begin),
##         (gt, "$qst_capture_conspirators_party_1", 0),
##         (party_is_active, "$qst_capture_conspirators_party_1"),
##         (val_add, ":num_active_parties", 1),
##         (try_begin),
##           (party_is_in_any_town, "$qst_capture_conspirators_party_1"),
##           (remove_party, "$qst_capture_conspirators_party_1"),
##         (else_try),
##           (party_get_num_attached_parties, ":num_attachments", "$qst_capture_conspirators_party_1"),
##           (gt, ":num_attachments", 0),
##           (assign, ":leave_meeting", 0),
##           (try_begin),
##             (store_sub, ":required_attachments", "$qst_capture_conspirators_num_parties_to_spawn", 1),
##             (eq, ":num_attachments", ":required_attachments"),
##             (val_add, "$qst_capture_conspirators_leave_meeting_counter", 1),
##             (ge, "$qst_capture_conspirators_leave_meeting_counter", 15),
##             (assign, ":leave_meeting", 1),
##           (try_end),
##           (try_begin),
##             (eq, "$qst_capture_conspirators_num_parties_to_spawn", "$qst_capture_conspirators_num_parties_spawned"),
##             (store_distance_to_party_from_party, ":cur_distance", "p_main_party", "$qst_capture_conspirators_party_1"),
##             (assign, ":min_distance", 3),
##             (try_begin),
##               (is_currently_night),
##               (assign, ":min_distance", 2),
##             (try_end),
##             (lt, ":cur_distance", ":min_distance"),
##             (assign, "$qst_capture_conspirators_leave_meeting_counter", 15),
##             (assign, ":leave_meeting", 1),
##           (try_end),
##           (eq, ":leave_meeting", 1),
##           (party_set_ai_behavior, "$qst_capture_conspirators_party_1", ai_bhvr_travel_to_point),
##           (party_set_flags, "$qst_capture_conspirators_party_1", pf_default_behavior, 0),
##           (party_get_position, pos1, "$qst_capture_conspirators_party_1"),
##           (call_script, "script_map_get_random_position_around_position_within_range", 15, 17),
##           (party_set_ai_target_position, "$qst_capture_conspirators_party_1", pos2),
##           (try_begin),
##             (gt, "$qst_capture_conspirators_party_2", 0),
##             (party_detach, "$qst_capture_conspirators_party_2"),
##             (party_set_ai_behavior, "$qst_capture_conspirators_party_2", ai_bhvr_travel_to_point),
##             (party_set_flags, "$qst_capture_conspirators_party_2", pf_default_behavior, 0),
##             (call_script, "script_map_get_random_position_around_position_within_range", 15, 17),
##             (party_set_ai_target_position, "$qst_capture_conspirators_party_2", pos2),
##           (try_end),
##           (try_begin),
##             (gt, "$qst_capture_conspirators_party_3", 0),
##             (party_detach, "$qst_capture_conspirators_party_3"),
##             (party_set_ai_behavior, "$qst_capture_conspirators_party_3", ai_bhvr_travel_to_point),
##             (party_set_flags, "$qst_capture_conspirators_party_3", pf_default_behavior, 0),
##             (call_script, "script_map_get_random_position_around_position_within_range", 15, 17),
##             (party_set_ai_target_position, "$qst_capture_conspirators_party_3", pos2),
##           (try_end),
##           (try_begin),
##             (gt, "$qst_capture_conspirators_party_4", 0),
##             (party_detach, "$qst_capture_conspirators_party_4"),
##             (party_set_ai_behavior, "$qst_capture_conspirators_party_4", ai_bhvr_travel_to_point),
##             (party_set_flags, "$qst_capture_conspirators_party_4", pf_default_behavior, 0),
##             (call_script, "script_map_get_random_position_around_position_within_range", 15, 17),
##             (party_set_ai_target_position, "$qst_capture_conspirators_party_4", pos2),
##           (try_end),
##           (try_begin),
##             (gt, "$qst_capture_conspirators_party_5", 0),
##             (party_detach, "$qst_capture_conspirators_party_5"),
##             (party_set_ai_behavior, "$qst_capture_conspirators_party_5", ai_bhvr_travel_to_point),
##             (party_set_flags, "$qst_capture_conspirators_party_5", pf_default_behavior, 0),
##             (call_script, "script_map_get_random_position_around_position_within_range", 15, 17),
##             (party_set_ai_target_position, "$qst_capture_conspirators_party_5", pos2),
##           (try_end),
##           (try_begin),
##             (gt, "$qst_capture_conspirators_party_6", 0),
##             (party_detach, "$qst_capture_conspirators_party_6"),
##             (party_set_ai_behavior, "$qst_capture_conspirators_party_6", ai_bhvr_travel_to_point),
##             (party_set_flags, "$qst_capture_conspirators_party_6", pf_default_behavior, 0),
##             (call_script, "script_map_get_random_position_around_position_within_range", 15, 17),
##             (party_set_ai_target_position, "$qst_capture_conspirators_party_6", pos2),
##           (try_end),
##           (try_begin),
##             (gt, "$qst_capture_conspirators_party_7", 0),
##             (party_detach, "$qst_capture_conspirators_party_7"),
##             (party_set_ai_behavior, "$qst_capture_conspirators_party_7", ai_bhvr_travel_to_point),
##             (party_set_flags, "$qst_capture_conspirators_party_7", pf_default_behavior, 0),
##             (call_script, "script_map_get_random_position_around_position_within_range", 15, 17),
##             (party_set_ai_target_position, "$qst_capture_conspirators_party_7", pos2),
##           (try_end),
##         (try_end),
##         (try_begin),
##           (get_party_ai_behavior, ":ai_behavior", "$qst_capture_conspirators_party_1"),
##           (eq, ":ai_behavior", ai_bhvr_travel_to_point),
##           (party_get_ai_target_position, pos2, "$qst_capture_conspirators_party_1"),
##           (party_get_position, pos1, "$qst_capture_conspirators_party_1"),
##           (get_distance_between_positions, ":distance", pos2, pos1),
##           (lt, ":distance", 200),
##           (call_script, "script_get_closest_walled_center_of_faction", "$qst_capture_conspirators_party_1", ":faction_no"),#Can fail
##           (ge, reg0, 0),
##           (party_set_ai_object, "$qst_capture_conspirators_party_1", reg0),
##           (party_set_ai_behavior, "$qst_capture_conspirators_party_1", ai_bhvr_travel_to_party),
##           (party_set_flags, "$qst_capture_conspirators_party_1", pf_default_behavior, 0),
##         (try_end),
##       (try_end),
##       (try_begin),
##         (gt, "$qst_capture_conspirators_party_2", 0),
##         (party_is_active, "$qst_capture_conspirators_party_2"),
##         (val_add, ":num_active_parties", 1),
##         (try_begin),
##           (party_is_in_any_town, "$qst_capture_conspirators_party_2"),
##           (try_begin),
##             (neg|party_is_in_town, "$qst_capture_conspirators_party_2", "$qst_capture_conspirators_party_1"),
##             (remove_party, "$qst_capture_conspirators_party_2"),
##           (else_try),
##             (get_party_ai_behavior, ":ai_behavior", "$qst_capture_conspirators_party_2"),
##             (neq, ":ai_behavior", ai_bhvr_hold),
##             (party_set_ai_behavior, "$qst_capture_conspirators_party_2", ai_bhvr_hold),
##             (party_attach_to_party, "$qst_capture_conspirators_party_2", "$qst_capture_conspirators_party_1"),
##             (party_set_flags, "$qst_capture_conspirators_party_2", pf_default_behavior, 0),
##           (try_end),
##         (try_end),
##         (try_begin),
##           (get_party_ai_behavior, ":ai_behavior", "$qst_capture_conspirators_party_2"),
##           (eq, ":ai_behavior", ai_bhvr_travel_to_point),
##           (party_get_ai_target_position, pos2, "$qst_capture_conspirators_party_2"),
##           (party_get_position, pos1, "$qst_capture_conspirators_party_2"),
##           (get_distance_between_positions, ":distance", pos2, pos1),
##           (lt, ":distance", 200),
##           (call_script, "script_get_closest_walled_center_of_faction", "$qst_capture_conspirators_party_2", ":faction_no"),#Can fail
##           (ge, reg0, 0),
##           (party_set_ai_object, "$qst_capture_conspirators_party_2", reg0),
##           (party_set_ai_behavior, "$qst_capture_conspirators_party_2", ai_bhvr_travel_to_party),
##           (party_set_flags, "$qst_capture_conspirators_party_2", pf_default_behavior, 0),
##         (try_end),
##       (try_end),
##       (try_begin),
##         (gt, "$qst_capture_conspirators_party_3", 0),
##         (party_is_active, "$qst_capture_conspirators_party_3"),
##         (val_add, ":num_active_parties", 1),
##         (try_begin),
##           (party_is_in_any_town, "$qst_capture_conspirators_party_3"),
##           (try_begin),
##             (neg|party_is_in_town, "$qst_capture_conspirators_party_3", "$qst_capture_conspirators_party_1"),
##             (remove_party, "$qst_capture_conspirators_party_3"),
##           (else_try),
##             (get_party_ai_behavior, ":ai_behavior", "$qst_capture_conspirators_party_3"),
##             (neq, ":ai_behavior", ai_bhvr_hold),
##             (party_set_ai_behavior, "$qst_capture_conspirators_party_3", ai_bhvr_hold),
##             (party_attach_to_party, "$qst_capture_conspirators_party_3", "$qst_capture_conspirators_party_1"),
##             (party_set_flags, "$qst_capture_conspirators_party_3", pf_default_behavior, 0),
##           (try_end),
##         (try_end),
##         (try_begin),
##           (get_party_ai_behavior, ":ai_behavior", "$qst_capture_conspirators_party_3"),
##           (eq, ":ai_behavior", ai_bhvr_travel_to_point),
##           (party_get_ai_target_position, pos2, "$qst_capture_conspirators_party_3"),
##           (party_get_position, pos1, "$qst_capture_conspirators_party_3"),
##           (get_distance_between_positions, ":distance", pos2, pos1),
##           (lt, ":distance", 200),
##           (call_script, "script_get_closest_walled_center_of_faction", "$qst_capture_conspirators_party_3", ":faction_no"),#Can fail
##           (ge, reg0, 0),
##           (party_set_ai_object, "$qst_capture_conspirators_party_3", reg0),
##           (party_set_ai_behavior, "$qst_capture_conspirators_party_3", ai_bhvr_travel_to_party),
##           (party_set_flags, "$qst_capture_conspirators_party_3", pf_default_behavior, 0),
##         (try_end),
##       (try_end),
##       (try_begin),
##         (gt, "$qst_capture_conspirators_party_4", 0),
##         (party_is_active, "$qst_capture_conspirators_party_4"),
##         (val_add, ":num_active_parties", 1),
##         (try_begin),
##           (party_is_in_any_town, "$qst_capture_conspirators_party_4"),
##           (try_begin),
##             (neg|party_is_in_town, "$qst_capture_conspirators_party_4", "$qst_capture_conspirators_party_1"),
##             (remove_party, "$qst_capture_conspirators_party_4"),
##           (else_try),
##             (get_party_ai_behavior, ":ai_behavior", "$qst_capture_conspirators_party_4"),
##             (neq, ":ai_behavior", ai_bhvr_hold),
##             (party_set_ai_behavior, "$qst_capture_conspirators_party_4", ai_bhvr_hold),
##             (party_set_flags, "$qst_capture_conspirators_party_4", pf_default_behavior, 0),
##             (party_attach_to_party, "$qst_capture_conspirators_party_4", "$qst_capture_conspirators_party_1"),
##           (try_end),
##         (try_end),
##         (try_begin),
##           (get_party_ai_behavior, ":ai_behavior", "$qst_capture_conspirators_party_4"),
##           (eq, ":ai_behavior", ai_bhvr_travel_to_point),
##           (party_get_ai_target_position, pos2, "$qst_capture_conspirators_party_4"),
##           (party_get_position, pos1, "$qst_capture_conspirators_party_4"),
##           (get_distance_between_positions, ":distance", pos2, pos1),
##           (lt, ":distance", 200),
##           (call_script, "script_get_closest_walled_center_of_faction", "$qst_capture_conspirators_party_4", ":faction_no"),#Can fail
##           (ge, reg0, 0),
##           (party_set_ai_object, "$qst_capture_conspirators_party_4", reg0),
##           (party_set_ai_behavior, "$qst_capture_conspirators_party_4", ai_bhvr_travel_to_party),
##           (party_set_flags, "$qst_capture_conspirators_party_4", pf_default_behavior, 0),
##         (try_end),
##       (try_end),
##       (try_begin),
##         (gt, "$qst_capture_conspirators_party_5", 0),
##         (party_is_active, "$qst_capture_conspirators_party_5"),
##         (val_add, ":num_active_parties", 1),
##         (try_begin),
##           (party_is_in_any_town, "$qst_capture_conspirators_party_5"),
##           (try_begin),
##             (neg|party_is_in_town, "$qst_capture_conspirators_party_5", "$qst_capture_conspirators_party_1"),
##             (remove_party, "$qst_capture_conspirators_party_5"),
##           (else_try),
##             (get_party_ai_behavior, ":ai_behavior", "$qst_capture_conspirators_party_5"),
##             (neq, ":ai_behavior", ai_bhvr_hold),
##             (party_set_ai_behavior, "$qst_capture_conspirators_party_5", ai_bhvr_hold),
##             (party_set_flags, "$qst_capture_conspirators_party_5", pf_default_behavior, 0),
##             (party_attach_to_party, "$qst_capture_conspirators_party_5", "$qst_capture_conspirators_party_1"),
##           (try_end),
##         (try_end),
##         (try_begin),
##           (get_party_ai_behavior, ":ai_behavior", "$qst_capture_conspirators_party_5"),
##           (eq, ":ai_behavior", ai_bhvr_travel_to_point),
##           (party_get_ai_target_position, pos2, "$qst_capture_conspirators_party_5"),
##           (party_get_position, pos1, "$qst_capture_conspirators_party_5"),
##           (get_distance_between_positions, ":distance", pos2, pos1),
##           (lt, ":distance", 200),
##           (call_script, "script_get_closest_walled_center_of_faction", "$qst_capture_conspirators_party_5", ":faction_no"),#Can fail
##           (ge, reg0, 0),
##           (party_set_ai_object, "$qst_capture_conspirators_party_5", reg0),
##           (party_set_ai_behavior, "$qst_capture_conspirators_party_5", ai_bhvr_travel_to_party),
##           (party_set_flags, "$qst_capture_conspirators_party_5", pf_default_behavior, 0),
##         (try_end),
##       (try_end),
##       (try_begin),
##         (gt, "$qst_capture_conspirators_party_6", 0),
##         (party_is_active, "$qst_capture_conspirators_party_6"),
##         (val_add, ":num_active_parties", 1),
##         (try_begin),
##           (party_is_in_any_town, "$qst_capture_conspirators_party_6"),
##           (try_begin),
##             (neg|party_is_in_town, "$qst_capture_conspirators_party_6", "$qst_capture_conspirators_party_1"),
##             (remove_party, "$qst_capture_conspirators_party_6"),
##           (else_try),
##             (get_party_ai_behavior, ":ai_behavior", "$qst_capture_conspirators_party_6"),
##             (neq, ":ai_behavior", ai_bhvr_hold),
##             (party_set_ai_behavior, "$qst_capture_conspirators_party_6", ai_bhvr_hold),
##             (party_set_flags, "$qst_capture_conspirators_party_6", pf_default_behavior, 0),
##             (party_attach_to_party, "$qst_capture_conspirators_party_6", "$qst_capture_conspirators_party_1"),
##           (try_end),
##         (try_end),
##         (try_begin),
##           (get_party_ai_behavior, ":ai_behavior", "$qst_capture_conspirators_party_6"),
##           (eq, ":ai_behavior", ai_bhvr_travel_to_point),
##           (party_get_ai_target_position, pos2, "$qst_capture_conspirators_party_6"),
##           (party_get_position, pos1, "$qst_capture_conspirators_party_6"),
##           (get_distance_between_positions, ":distance", pos2, pos1),
##           (lt, ":distance", 200),
##           (call_script, "script_get_closest_walled_center_of_faction", "$qst_capture_conspirators_party_6", ":faction_no"),#Can fail
##           (ge, reg0, 0),
##           (party_set_ai_object, "$qst_capture_conspirators_party_6", reg0),
##           (party_set_ai_behavior, "$qst_capture_conspirators_party_6", ai_bhvr_travel_to_party),
##           (party_set_flags, "$qst_capture_conspirators_party_6", pf_default_behavior, 0),
##         (try_end),
##       (try_end),
##       (try_begin),
##         (gt, "$qst_capture_conspirators_party_7", 0),
##         (party_is_active, "$qst_capture_conspirators_party_7"),
##         (val_add, ":num_active_parties", 1),
##         (try_begin),
##           (party_is_in_any_town, "$qst_capture_conspirators_party_7"),
##           (try_begin),
##             (neg|party_is_in_town, "$qst_capture_conspirators_party_7", "$qst_capture_conspirators_party_1"),
##             (remove_party, "$qst_capture_conspirators_party_7"),
##           (else_try),
##             (get_party_ai_behavior, ":ai_behavior", "$qst_capture_conspirators_party_7"),
##             (neq, ":ai_behavior", ai_bhvr_hold),
##             (party_set_ai_behavior, "$qst_capture_conspirators_party_7", ai_bhvr_hold),
##             (party_set_flags, "$qst_capture_conspirators_party_7", pf_default_behavior, 0),
##             (party_attach_to_party, "$qst_capture_conspirators_party_7", "$qst_capture_conspirators_party_1"),
##           (try_end),
##         (try_end),
##         (try_begin),
##           (get_party_ai_behavior, ":ai_behavior", "$qst_capture_conspirators_party_7"),
##           (eq, ":ai_behavior", ai_bhvr_travel_to_point),
##           (party_get_ai_target_position, pos2, "$qst_capture_conspirators_party_7"),
##           (party_get_position, pos1, "$qst_capture_conspirators_party_7"),
##           (get_distance_between_positions, ":distance", pos2, pos1),
##           (lt, ":distance", 200),
##           (call_script, "script_get_closest_walled_center_of_faction", "$qst_capture_conspirators_party_7", ":faction_no"),#Can fail
##           (ge, reg0, 0),
##           (party_set_ai_object, "$qst_capture_conspirators_party_7", reg0),
##           (party_set_ai_behavior, "$qst_capture_conspirators_party_7", ai_bhvr_travel_to_party),
##           (party_set_flags, "$qst_capture_conspirators_party_7", pf_default_behavior, 0),
##         (try_end),
##       (try_end),
##
##       (eq, ":num_active_parties", 0),
##       (party_count_prisoners_of_type, ":count_captured_conspirators", "p_main_party", "trp_conspirator"),
##       (party_count_prisoners_of_type, ":count_captured_conspirator_leaders", "p_main_party", "trp_conspirator_leader"),
##       (val_add, ":count_captured_conspirators", ":count_captured_conspirator_leaders"),
##       (try_begin),
##         (store_div, ":limit", "$qst_capture_conspirators_num_troops_to_capture", 2),
##         (gt, ":count_captured_conspirators", ":limit"),
##         (call_script, "script_succeed_quest", "qst_capture_conspirators"),
##       (else_try),
##         (call_script, "script_fail_quest", "qst_capture_conspirators"),
##       (try_end),
##    ],
##   []
##   ),
# Follow Spy quest
  # (0.5, 0.0, 0.0,
   # [
       # (check_quest_active, "qst_follow_spy"),
       # (eq, "$qst_follow_spy_no_active_parties", 0),
       # (quest_get_slot, ":quest_giver_center", "qst_follow_spy", slot_quest_giver_center),
       # (quest_get_slot, ":quest_object_center", "qst_follow_spy", slot_quest_object_center),
       # (assign, ":abort_meeting", 0),
       # (try_begin),
         # (this_or_next|ge, "$qst_follow_spy_run_away", 2),
         # (this_or_next|neg|party_is_active, "$qst_follow_spy_spy_party"),
         # (neg|party_is_active, "$qst_follow_spy_spy_partners_party"),
       # (else_try),
         # (eq, "$qst_follow_spy_meeting_state", 0),
         # (store_distance_to_party_from_party, ":cur_distance", "p_main_party", "$qst_follow_spy_spy_party"),
         # (try_begin),
           # (assign, ":min_distance", 3),
           # (try_begin),
             # (is_currently_night),
             # (assign, ":min_distance", 1),
           # (try_end),
           # (le, ":cur_distance", ":min_distance"),
           # (store_distance_to_party_from_party, ":player_distance_to_quest_giver_center", "p_main_party", ":quest_giver_center"),
           # (gt, ":player_distance_to_quest_giver_center", 1),
           # (val_add, "$qst_follow_spy_run_away", 1),
           # (try_begin),
             # (eq, "$qst_follow_spy_run_away", 2),
             # (assign, ":abort_meeting", 1),
             # (display_message, "str_qst_follow_spy_noticed_you"),
           # (try_end),
         # (else_try),
           # (store_distance_to_party_from_party, ":cur_distance", "$qst_follow_spy_spy_partners_party", "$qst_follow_spy_spy_party"),
           # (le, ":cur_distance", 1),
           # (party_attach_to_party, "$qst_follow_spy_spy_party", "$qst_follow_spy_spy_partners_party"),
           # (assign, "$qst_follow_spy_meeting_state", 1),
           # (assign, "$qst_follow_spy_meeting_counter", 0),
         # (try_end),
       # (else_try),
         # (eq, "$qst_follow_spy_meeting_state", 1),
         # (store_distance_to_party_from_party, ":cur_distance", "p_main_party", "$qst_follow_spy_spy_partners_party"),
         # (try_begin),
           # (le, ":cur_distance", 1),
           # (party_detach, "$qst_follow_spy_spy_party"),
           # (val_add, "$qst_follow_spy_run_away", 1),
           # (try_begin),
             # (eq, "$qst_follow_spy_run_away", 2),
             # (assign, ":abort_meeting", 1),
             # (display_message, "str_qst_follow_spy_noticed_you"),
           # (try_end),
         # (else_try),
           # (val_add, "$qst_follow_spy_meeting_counter", 1),
           # (gt, "$qst_follow_spy_meeting_counter", 4),
           # (party_detach, "$qst_follow_spy_spy_party"),
           # (assign, ":abort_meeting", 1),
           # (assign, "$qst_follow_spy_meeting_state", 2),
         # (try_end),
       # (try_end),
       # (try_begin),
         # (eq, ":abort_meeting", 1),
         # (party_set_ai_object, "$qst_follow_spy_spy_party", ":quest_giver_center"),
         
         # (party_set_ai_object, "$qst_follow_spy_spy_partners_party", ":quest_object_center"),
         
         # (party_set_ai_behavior, "$qst_follow_spy_spy_party", ai_bhvr_travel_to_party),
         # (party_set_ai_behavior, "$qst_follow_spy_spy_partners_party", ai_bhvr_travel_to_party),
         # (party_set_flags, "$qst_follow_spy_spy_party", pf_default_behavior, 0),
         # (party_set_flags, "$qst_follow_spy_spy_partners_party", pf_default_behavior, 0),
       # (try_end),
       # (assign, ":num_active", 0),
       # (try_begin),
         # (party_is_active, "$qst_follow_spy_spy_party"),
         # (val_add, ":num_active", 1),
         # (party_is_in_town, "$qst_follow_spy_spy_party", ":quest_giver_center"),
         # (remove_party, "$qst_follow_spy_spy_party"),
         # (assign, "$qst_follow_spy_spy_back_in_town", 1),
         # (val_sub, ":num_active", 1),
       # (try_end),
       # (try_begin),
         # (party_is_active, "$qst_follow_spy_spy_partners_party"),
         # (val_add, ":num_active", 1),
         # (party_is_in_town, "$qst_follow_spy_spy_partners_party", ":quest_object_center"),
         # (remove_party, "$qst_follow_spy_spy_partners_party"),
         # (assign, "$qst_follow_spy_partner_back_in_town", 1),
         # (val_sub, ":num_active", 1),
       # (try_end),
       # (try_begin),
         # (eq, "$qst_follow_spy_partner_back_in_town",1),
         # (eq, "$qst_follow_spy_spy_back_in_town",1),
         # (call_script, "script_fail_quest", "qst_follow_spy"),
       # (try_end),
       # (try_begin),
         # (eq, ":num_active", 0),
         # (assign, "$qst_follow_spy_no_active_parties", 1),
         # (party_count_prisoners_of_type, ":num_spies", "p_main_party", "trp_spy"),
         # (party_count_prisoners_of_type, ":num_spy_partners", "p_main_party", "trp_spy_partner"),
         # (gt, ":num_spies", 0),
         # (gt, ":num_spy_partners", 0),
         # (call_script, "script_succeed_quest", "qst_follow_spy"),
       # (try_end),
    # ],
   # []
   # ),
### Raiders quest
##  (0.95, 0.0, 0.2,
##   [
##       (check_quest_active, "qst_hunt_down_raiders"),
##       (neg|check_quest_succeeded, "qst_hunt_down_raiders"),
##       (neg|check_quest_failed, "qst_hunt_down_raiders"),
##    ],
##   [
##       (quest_get_slot, ":quest_target_party", "qst_hunt_down_raiders", slot_quest_target_party),
##       (party_set_ai_behavior, ":quest_target_party", ai_bhvr_hold),
##       (party_set_flags, ":quest_target_party", pf_default_behavior, 0),
##    ]
##   ),
##
##  (0.7, 0, 0.2,
##   [
##       (check_quest_active, "qst_hunt_down_raiders"),
##       (neg|check_quest_succeeded, "qst_hunt_down_raiders"),
##       (neg|check_quest_failed, "qst_hunt_down_raiders"),
##    ],
##   [
##       (quest_get_slot, ":quest_target_party", "qst_hunt_down_raiders", slot_quest_target_party),
##       (party_set_ai_behavior,":quest_target_party",ai_bhvr_travel_to_party),
##       (party_set_flags, ":quest_target_party", pf_default_behavior, 0),
##    ]
##   ),
##  
##  (0.1, 0.0, 0.0,
##   [
##       (check_quest_active, "qst_hunt_down_raiders"),
##       (neg|check_quest_succeeded, "qst_hunt_down_raiders"),
##       (neg|check_quest_failed, "qst_hunt_down_raiders"),
##       (quest_get_slot, ":quest_target_party", "qst_hunt_down_raiders", slot_quest_target_party),
##       (neg|party_is_active, ":quest_target_party")
##    ],
##   [
##       (call_script, "script_succeed_quest", "qst_hunt_down_raiders"),
##    ]
##   ),
##  
##  (1.3, 0, 0.0,
##   [
##       (check_quest_active, "qst_hunt_down_raiders"),
##       (neg|check_quest_succeeded, "qst_hunt_down_raiders"),
##       (neg|check_quest_failed, "qst_hunt_down_raiders"),
##       (quest_get_slot, ":quest_target_party", "qst_hunt_down_raiders", slot_quest_target_party),
##       (quest_get_slot, ":quest_target_center", "qst_hunt_down_raiders", slot_quest_target_center),
##       (party_is_in_town,":quest_target_party",":quest_target_center")
##    ],
##   [
##       (call_script, "script_fail_quest", "qst_hunt_down_raiders"),
##       (display_message, "str_raiders_reached_base"),
##       (quest_get_slot, ":quest_target_party", "qst_hunt_down_raiders", slot_quest_target_party),
##       (remove_party, ":quest_target_party"),
##    ]
##   ),

##### TODO: QUESTS COMMENT OUT END

#########################################################################
# Random MERCHANT quest triggers
####################################  
 # Apply interest to merchants guild debt  1% per week
  # (24.0 * 7, 0.0, 0.0,
   # [],
   # [
       # (val_mul,"$debt_to_merchants_guild",101),
       # (val_div,"$debt_to_merchants_guild",100)
    # ]
   # ),
# Escort merchant caravan:
  # (0.1, 0.0, 0.1, [(check_quest_active, "qst_escort_merchant_caravan"),
                   # (eq, "$escort_merchant_caravan_mode", 1)
                   # ],
                  # [(quest_get_slot, ":quest_target_party", "qst_escort_merchant_caravan", slot_quest_target_party),
                   # (try_begin),
                     # (party_is_active, ":quest_target_party"),
                     # (party_set_ai_behavior, ":quest_target_party", ai_bhvr_hold),
                     # (party_set_flags, ":quest_target_party", pf_default_behavior, 0),
                   # (try_end),
                   # ]),
  # (0.1, 0.0, 0.1, [(check_quest_active, "qst_escort_merchant_caravan"),
                    # (eq, "$escort_merchant_caravan_mode", 0),
                    # ],
                   # [(quest_get_slot, ":quest_target_party", "qst_escort_merchant_caravan", slot_quest_target_party),
                    # (try_begin),
                      # (party_is_active, ":quest_target_party"),
                      # (party_set_ai_behavior, ":quest_target_party", ai_bhvr_escort_party),
                      # (party_set_flags, ":quest_target_party", pf_default_behavior, 0),
                      # (party_set_ai_object, ":quest_target_party", "p_main_party"),
                    # (try_end),
                    # ]),

  # (0.1, 0, 0.0, [(check_quest_active, "qst_escort_merchant_caravan"),
                 # (quest_get_slot, ":quest_target_party", "qst_escort_merchant_caravan", slot_quest_target_party),
                 # (neg|party_is_active,":quest_target_party"),
                 # ],
                # [(call_script, "script_abort_quest", "qst_escort_merchant_caravan", 2),
                 # ]),

# Troublesome bandits
  # (0.3, 0.0, 1.1, [(check_quest_active, "qst_troublesome_bandits"),
                   # (neg|check_quest_failed, "qst_troublesome_bandits"),
                   # (store_num_parties_destroyed, ":cur_eliminated", "pt_troublesome_bandits"),
                   # (lt, "$qst_troublesome_bandits_eliminated", ":cur_eliminated"),
                   # (store_num_parties_destroyed_by_player, ":cur_eliminated_by_player", "pt_troublesome_bandits"),
                   # (eq, ":cur_eliminated_by_player", "$qst_troublesome_bandits_eliminated_by_player"),
                   # ],
                  # [(display_message, "str_bandits_eliminated_by_another"),
                   # (call_script, "script_abort_quest", "qst_troublesome_bandits", 0),
                   # ]),

  # (0.3, 0.0, 1.1, [(check_quest_active, "qst_troublesome_bandits"),
                   # (neg|check_quest_succeeded, "qst_troublesome_bandits"),
                   # (store_num_parties_destroyed, ":cur_eliminated", "pt_troublesome_bandits"),
                   # (lt, "$qst_troublesome_bandits_eliminated", ":cur_eliminated"),
                   # (store_num_parties_destroyed_by_player, ":cur_eliminated_by_player", "pt_troublesome_bandits"),
                   # (neq, ":cur_eliminated_by_player", "$qst_troublesome_bandits_eliminated_by_player"),
                   # ],
                  # [(call_script, "script_succeed_quest", "qst_troublesome_bandits"),]),
				  
# Kidnapped girl:
   (0, 0, 0, #14
   [
   (try_begin),
		(check_quest_active, "qst_PorwanaKobieta"),
		(quest_slot_eq, "qst_PorwanaKobieta",slot_quest_current_state,3),
		(start_map_conversation, "trp_porwanakobieta"),
		(quest_set_slot, "qst_PorwanaKobieta",slot_quest_current_state,4),
	(else_try),
		(check_quest_active, "qst_PorwanaKobieta"),
		(quest_slot_eq, "qst_PorwanaKobieta",slot_quest_current_state,4),
		(quest_get_slot, ":town", "qst_PorwanaKobieta",slot_quest_object_center),
		(store_distance_to_party_from_party, ":dist", "p_main_party",":town"),
		(le, ":dist",3),
		(start_map_conversation, "trp_porwanakobieta"),
		(quest_set_slot, "qst_PorwanaKobieta",slot_quest_current_state,5),
   (try_end),
    (try_begin),
		(eq, "$Prolog",12),
		(start_map_conversation, "trp_iksinski"),
	(try_end),
    (check_quest_active, "qst_kidnapped_girl"),
    (quest_get_slot, ":quest_target_party", "qst_kidnapped_girl", slot_quest_target_party),
    (party_is_active, ":quest_target_party"),
    (party_is_in_any_town, ":quest_target_party"),
    # (remove_party, ":quest_target_party"),
    ],
   []
   ),
   
   (1, 23, ti_once, [(eq, "$Etap4", 1)],
   [
	#First wave
	#Pierwsza fala
		(call_script, "script_initRegions"),
		(assign, "$Etap4State", Etap4_CounterWave),
		(assign, "$Etap4Substate", -1),
		(assign, "$Etap4Time", 1),
   ]),
   
   (1,24,0,[(check_quest_active, "qst_gZdrada"),
   (quest_slot_eq, "qst_gZdrada",slot_quest_temp_slot,1),
   ],[
   (spawn_around_party, "p_town_1","pt_runaway_serfs"),
   (assign, ":party",reg0),
   (quest_set_slot, "qst_gZdrada",slot_quest_target_party,reg0),
   (quest_set_slot, "qst_gZdrada",slot_quest_temp_slot,2),
   (call_script, "script_party_set_ai_state", ":party", spai_retreating_to_center, "p_town_18"),
   ]),
   (0.3,0,0,[
	(check_quest_active, "qst_gZdrada"),
   ],[
   (try_begin),
	   (quest_slot_eq, "qst_gZdrada",slot_quest_temp_slot,2),
	   (quest_get_slot, ":party", "qst_gZdrada",slot_quest_target_party),
	   (store_distance_to_party_from_party, ":dist", ":party", "p_town_18"),
	   (le, ":dist", 3),
	   (1,"script_fail_quest", "qst_gZdrada"),
	   (1,"script_end_quest", "qst_gZdrada"),
	   (remove_party, ":party"),
   (else_try),
		(quest_slot_eq, "qst_gZdrada",slot_quest_temp_slot,3),
		(assign, ":ok", 1),
		(party_count_prisoners_of_type, ":c1","p_main_party","trp_Zdradat1"),
		(party_count_prisoners_of_type, ":c2","p_main_party","trp_Zdradat2"),
		(party_count_prisoners_of_type, ":c3","p_main_party","trp_Zdradat3"),
		(try_begin),
			(this_or_next|eq, ":c1",0),
			(this_or_next|eq, ":c2",0),
			(			  eq, ":c3",0),
			(assign, ":ok",0),
		(try_end),
		(try_begin),
			(eq, ":ok",1),
			(call_script,"script_succeed_quest","qst_gZdrada"),
		(else_try),
			(call_script,"script_fail_quest","qst_gZdrada"),
			(call_script,"script_end_quest","qst_gZdrada"),
		(try_end),
   (try_end),
   ]),
   
   (24.0,0.0,0.0,[
   # (eq, "$Powstanie",1),
   ],[
		# (try_begin),(ge, "$cheat_mode", 1),
			(assign, reg0, "$AIPower"),
			]+debugMessage("@AI tick, AIPower: {reg0}")+[
		# (try_end),
   
	(try_begin),
		(eq, "$Powstanie",1),
		(neq, "$Etap4",1),
		]+debugMessage("@AI 3 etap...")+[
		(try_for_range, ":troop", "trp_knight_1_1",lords_end),
			(str_store_troop_name, s0, ":troop"),
			# (try_begin),(ge, "$_DEBUG", 1),(display_log_message, "@E3AI: Process {s0}"),(try_end),
			# (troop_slot_eq, ":troop", slot_troop_occupation,slto_kingdom_hero),
			(store_troop_faction, ":fac", ":troop"),
			(try_begin),
				(eq, ":fac", Kosciuszkowcy),
				# (display_log_message, "@   Kosciuszkowiec"),
				# (troop_slot_eq,":troop",GrupaAtaku,-1),
				(troop_get_slot, ":party",":troop",slot_troop_leaded_party),
				(gt, ":party", 0),
				(party_is_active, ":party"),
				# (display_log_message, "@      with party"),
				
				(1,"script_GetPartyLimit", ":party"),
				(assign, ":max_size", reg0),
				(party_get_num_companions, ":cur_size", ":party"),
				(store_mul, ":ratio",":cur_size", 100),
				(val_div, ":ratio", ":max_size"),
				(party_get_slot, ":ai_state", ":party", slot_party_ai_state),
				# (party_get_slot, ":ai_object", ":party", slot_party_ai_object),
				(assign, reg0, ":ai_state"),
				(display_message, "@       ai state = {reg0}"),
				(try_begin),
					(eq, ":ai_state", spai_holding_center),
					(this_or_next|le, ":ratio", 95),
					(le, "$AIPower", 0),
					(display_log_message, "@           is holding center and do nothing"),
					#do nothing
				(else_try),
					(neq, ":ai_state", spai_holding_center),
					(this_or_next|le, ":ratio", 60),
					(le, "$AIPower", 0),
					(1,"script_get_closest_center_of_faction", ":party", ":fac"),
					(is_between, reg0, centers_begin, centers_end),
					(assign, ":cel", reg0),
					(str_store_troop_name, s0, ":troop"),
					(str_store_party_name, s1, reg0),
					# (try_begin),(ge, 1, 1),(display_log_message, "@E3AI: {s0} odpoczywa w {s1}"),(try_end),
					(call_script, "script_party_set_ai_state", ":party", spai_holding_center, ":cel"),
				(else_try),
					(neg|troop_slot_ge,":troop",GrupaAtaku,1),
					(call_script, "script_get_center_to_take", Kosciuszkowcy, "trp_prior1"),
					(try_begin),
						(eq, reg0, -1),
						(call_script, "script_get_center_to_take", Kosciuszkowcy, "trp_prior2"),
						(eq, reg0, -1),
						(call_script, "script_get_center_to_take", Kosciuszkowcy, "trp_prior3"),
					(try_end),
					(is_between, reg0, "p_town_1", "p_village_1"),
					(assign, ":cel", reg0),
					(troop_set_slot, ":troop",GrupaAtaku,reg0),
					(str_store_troop_name, s0, ":troop"),
					(str_store_party_name, s1, reg0),
					# (try_begin),(ge, 1, 1),(display_log_message, "@E3AI: {s0} atakuje {s1}"),(try_end),
					# (1,"script_spai_message", 3),
					(call_script, "script_party_set_ai_state", ":party", spai_besieging_center, ":cel"),
					(troop_set_slot, ":troop",Czekaj,1),
				(try_end),
				
			(else_try),
				(this_or_next|eq, ":fac", "fac_kingdom_6"),
				(eq, ":fac", "fac_kingdom_7"),
				(troop_get_slot, ":bound", ":troop", BoundLocation),
				(str_store_troop_name, s1, ":troop"),
				
				(ge, ":bound", towns_begin),
				(party_is_active, ":bound"),
				# (display_message, "@AI for {s1} with bound {s2}..."),
				(str_store_party_name, s2, ":bound"),	
				(troop_set_slot, ":troop", GrupaAtaku, -1),
				(troop_get_slot, ":party",":troop",slot_troop_leaded_party),
				(party_is_active, ":party"),
				(gt, ":party", 0),
				# (display_message, "@has party"),
				(1,"script_party_calculate_strength", ":party",0),
				(assign, ":strength", reg0),
				
				(try_begin),		
					(1,"script_GetPartyLimit", ":party"),
					(assign, ":max_size", reg0),
					(party_get_num_companions, ":cur_size", ":party"),
					(store_mul, ":ratio",":cur_size", 100),
					(val_div, ":ratio", ":max_size"),

					(party_get_slot, ":ai_state", ":party", slot_party_ai_state),
					# (party_get_slot, ":ai_object", ":party", slot_party_ai_object),

					(try_begin),
						(eq, ":ai_state", spai_holding_center),
						(le, ":ratio", 95),
						# (display_message, "@  do nothing"),
						#do nothing
					(else_try),
						(neq, ":ai_state", spai_holding_center),
						(le, ":ratio", 60),
						(call_script, "script_party_set_ai_state", ":party", spai_holding_center, ":bound"),
						# (display_message, "@  hold center"),
					(else_try),
						(party_get_slot, ":besieger", ":bound", slot_center_is_besieged_by),
						(try_begin),
							(gt, ":besieger", 0),
							(party_is_active, ":besieger"),
							
							# (display_message, "@  helping besieged"),
							(1,"script_party_calculate_strength", ":besieger",0),
							(assign, ":enemy_strength", reg0),
							(try_begin),
								(ge, ":strength", ":enemy_strength"),
								(call_script, "script_party_set_ai_state", ":party", spai_engaging_army, ":besieger"),
							(else_try),
								(call_script, "script_party_set_ai_state", ":party", spai_holding_center, ":bound"),
							(try_end),
						(else_try),
							(str_store_troop_name, s0, ":troop"),
							(str_store_party_name, s1, ":bound"),
							(try_begin),(ge, "$cheat_mode", 1),(display_message, "@{s0} patroluje {s1}"),(try_end),
							(call_script, "script_party_set_ai_state", ":party", spai_patrolling_around_center, ":bound"),
						(try_end),
					(try_end),
				(try_end),
			(try_end),		
		(try_end),
	(else_try),
		(eq, "$Etap4",1),
		
		# (try_begin),
			# (eq, "$_DEBUG", 1),
			# (display_log_message, "@4 Etap AI...", 0xd42121),
		# (try_end),
		]+debugMessage("@4Etap AI...",0xd42121)+[
		(try_for_range, ":troop", "trp_knight_1_1",lords_end),
			# (troop_slot_eq, ":troop", slot_troop_occupation,slto_kingdom_hero),
			(store_troop_faction, ":fac", ":troop"),
			(troop_get_slot, ":party",":troop",slot_troop_leaded_party),
			(party_is_active, ":party"),
			(gt, ":party", 0),
			(1,"script_party_calculate_strength", ":party",0),
			(assign, ":strength", reg0),
			(troop_get_slot, ":bound", ":troop", BoundLocation),
			(try_begin),
				(eq, ":fac", Kosciuszkowcy),
					
				(1,"script_GetPartyLimit", ":party"),
				(assign, ":max_size", reg0),
				(party_get_num_companions, ":cur_size", ":party"),
				(store_mul, ":ratio",":cur_size", 100),
				(val_div, ":ratio", ":max_size"),

				(party_get_slot, ":ai_state", ":party", slot_party_ai_state),
				# (party_get_slot, ":ai_object", ":party", slot_party_ai_object),

				(try_begin),
					(eq, ":ai_state", spai_holding_center),
					(le, ":ratio", 95),
					#do nothing
				(else_try),
					(neq, ":ai_state", spai_holding_center),
					(le, ":ratio", 60),
					(call_script, "script_party_set_ai_state", ":party", spai_holding_center, ":bound"),
				(else_try),
					(this_or_next|eq, ":ai_state", spai_undefined),
				    (troop_slot_eq, ":troop", GrupaAtaku, -1),
					
					(try_begin),
						(lt, ":bound", 1),
						(str_store_troop_name, s0, ":troop"),
						]+debugMessage("@DEBUG: {s0} doesnt have a bound")+[
					(try_end),
					
					(gt, ":bound", 0),
					(party_get_slot, ":besieger", ":bound", slot_center_is_besieged_by),
					(try_begin),
						(party_is_active, ":besieger"),
						
						(1,"script_party_calculate_strength", ":besieger",0),
						(assign, ":enemy_strength", reg0),
						(try_begin),
							(ge, ":strength", ":enemy_strength"),
							(call_script, "script_party_set_ai_state", ":party", spai_engaging_army, ":besieger"),
						(else_try),
							(call_script, "script_party_set_ai_state", ":party", spai_holding_center, ":bound"),
						(try_end),
					(else_try),
						(str_store_troop_name, s0, ":troop"),
						(str_store_party_name, s1, ":bound"),
						# (try_begin),(ge, "$_DEBUG", 1),(display_log_message, "@{s0} patroluje {s1}"),(try_end),
						(call_script, "script_party_set_ai_state", ":party", spai_patrolling_around_center, ":bound"),
					(try_end),
				(else_try),
					(troop_slot_ge, ":troop", GrupaAtaku, 1),
					(troop_get_slot, ":attack", ":troop", GrupaAtaku),
					(store_faction_of_party, ":fac", ":attack"),
					(store_relation, ":rel", ":fac", "fac_kingdom_5"),
					(try_begin),
						(lt, ":rel", 0),
						(call_script, "script_party_set_ai_state", ":party", spai_besieging_center, ":attack"),
					(else_try),
						(troop_set_slot, ":troop", GrupaAtaku, -1),
					(try_end),
				(try_end),
			(else_try),
				(this_or_next|eq, ":fac", Rosja),
				(this_or_next|eq, ":fac", Prusy),
				(eq, ":fac", Austria),
				
				# (eq,0,1),
				
				(gt, ":party", 0),
				(party_is_active, ":party"),
				(troop_get_slot, ":grupa", ":troop", GrupaAtaku),
				(assign, reg0, ":grupa"),
				(str_store_troop_name, s0, ":troop"),
				# (try_begin),(ge, "$cheat_mode", 1),(display_message, "@{s0} atak: {reg0}"),(try_end),
				
				(1,"script_GetPartyLimit", ":party"),
				(assign, ":max_size", reg0),
				(party_get_num_companions, ":cur_size", ":party"),
				(store_mul, ":ratio",":cur_size", 100),
				(val_div, ":ratio", ":max_size"),

				(party_get_slot, ":ai_state", ":party", slot_party_ai_state),
				(party_get_slot, ":ai_object", ":party", slot_party_ai_object),
				(assign, reg0, ":ai_state"),
				(assign, reg1, ":ai_object"),
				(str_store_troop_name, s0, ":troop"),
				# ]+debugMessage("@AI: {s0}: {reg0} {reg1}",0xd42121)+[

				(try_begin),
					(eq, ":ai_state", spai_holding_center),
					# ]+debugMessage("@   branch: 1 0",0xd42121)+[
					(le, ":ratio", 85),
					# ]+debugMessage("@   branch: 1 1",0xd42121)+[
					#do nothing
					(str_store_troop_name, s0, ":troop"),
					(str_store_party_name, s1, ":bound"),
					(assign, reg0, ":ratio"),
					(assign, reg1, ":cur_size"),
					(assign, reg2, ":max_size"),
					(try_begin),(ge, "$_DEBUG", 1),(display_log_message, "@4etap_1: {s0} nadal odpoczywa w {s1} ({reg0}%%) {reg1}/{reg2}"),(try_end),
					(troop_set_slot, ":troop", GrupaAtaku, -1),
				(else_try),
					(neq, ":ai_state", spai_holding_center),
					# ]+debugMessage("@   branch: 2 0",0xd42121)+[
					(le, ":ratio", 50),
					# ]+debugMessage("@   branch: 2 1",0xd42121)+[
					(call_script, "script_party_set_ai_state", ":party", spai_holding_center, ":bound"),
					(str_store_troop_name, s0, ":troop"),
					(str_store_party_name, s1, ":bound"),
					(assign, reg0, ":ratio"),
					(assign, reg1, ":cur_size"),
					(assign, reg2, ":max_size"),
					(troop_set_slot, ":troop", GrupaAtaku, -1),
					(try_begin),(ge, "$_DEBUG", 1),(display_log_message, "@4etap_1: {s0} idzie odpoczywac w {s1} ({reg0}%%) {reg1}/{reg2}"),(try_end),
				(else_try),
					(eq,0,1),
					# (troop_slot_eq,":troop",GrupaAtaku,-1),
					# ]+debugMessage("@   branch: 3 0",0xd42121)+[
					(party_get_slot, ":besieger", ":bound", slot_center_is_besieged_by),
					(try_begin),
						(party_is_active, ":besieger"),
						# ]+debugMessage("@   branch: 3 1",0xd42121)+[
						
						(1,"script_party_calculate_strength", ":besieger",0),
						(assign, ":enemy_strength", reg0),
						(try_begin),
							(ge, ":strength", ":enemy_strength"),
							(call_script, "script_party_set_ai_state", ":party", spai_engaging_army, ":besieger"),
						(else_try),
							(call_script, "script_party_set_ai_state", ":party", spai_holding_center, ":bound"),
						(try_end),
					(else_try),
						# ]+debugMessage("@   branch: 3 2",0xd42121)+[
						(assign, reg0, -1),

						(try_begin),
							(call_script, "script_get_center_to_take", ":fac", "trp_prior3"),
							]+debugMessage("@   center: {reg0}",0xd42121)+[
							(neg|party_is_active, reg0),
							(call_script, "script_get_center_to_take", ":fac", "trp_prior2"),
							]+debugMessage("@   center: {reg0}",0xd42121)+[
							(neg|party_is_active, reg0),
							(call_script, "script_get_center_to_take", ":fac", "trp_prior1"),
							]+debugMessage("@   center: {reg0}",0xd42121)+[
						(try_end),
						(is_between, reg0, "p_town_1", "p_village_1"),
						(assign, ":attack", reg0),
						(troop_set_slot, ":troop",GrupaAtaku,":attack"),
						(call_script, "script_party_set_ai_state", ":party", spai_besieging_center, ":attack"),
						(str_store_troop_name, s0, ":troop"),
						(str_store_party_name, s1, ":attack"),
						(try_begin),(ge, "$_DEBUG", 1),(display_log_message, "@4etap_1: {s0} atakuje {s1}"),(try_end),
						# (1,"script_spai_message", 4),
						(troop_set_slot, ":troop",Czekaj,1),
					(try_end),
				(try_end),
			(try_end),
		(try_end),
	(else_try),
		(neq, "$Etap4", 1),
		(neq, "$Powstanie", 1),
		]+debugMessage("@AI ani 3 ani 4 etap...")+[
		(try_for_range, ":troop", "trp_knight_1_1",lords_end),
			(store_troop_faction, ":troop_fac", ":troop"),
			
			(troop_get_slot, ":party",":troop",slot_troop_leaded_party),
			(gt, ":party", 0),
			(party_is_active, ":party"),

			
			(1,"script_GetPartyLimit", ":party"),
			(assign, ":max_size", reg0),
			(party_get_num_companions, ":cur_size", ":party"),
			(store_mul, ":ratio",":cur_size", 100),
			(val_div, ":ratio", ":max_size"),
		    (party_get_slot, ":ai_state", ":party", slot_party_ai_state),
			
			(try_begin),
				
				(try_begin),
					(eq, ":ai_state", spai_holding_center),
					(le, ":ratio", 85),
					(troop_set_slot, ":troop", GrupaAtaku, -1),
				(else_try),
					(neq, ":ai_state", spai_holding_center),
					(le, ":ratio", 50),
					(call_script, "script_party_set_ai_state", ":party", spai_holding_center, ":bound"),
					(troop_set_slot, ":troop", GrupaAtaku, -1),
				(else_try),
					(troop_slot_eq,":troop",GrupaAtaku,-1),
					(try_begin),
						(neq, ":troop_fac", "fac_kingdom_6"),
						(neq, ":troop_fac", "fac_kingdom_7"),
						(store_random_in_range, ":r", 0, 100),
						(le, ":r", 10),
						(assign, ":best_target", -1),
						(assign, ":lowest_score", 999999999),
						
						(try_for_range, ":cur_center", centers_begin, centers_end),
							(store_faction_of_party, ":fac",":cur_center"),
							(neq,":fac",":troop_fac"),
							(store_relation, ":rel", ":fac",":troop_fac"),
							(lt, ":rel",0),
							(1,"script_party_calculate_strength", ":cur_center",0),
							(lt, reg0, ":lowest_score"),
							(assign, ":best_target", ":cur_center"),
							(assign, ":lowest_score", reg0),
						(try_end),
						(troop_set_slot, ":troop", GrupaAtaku, ":best_target"),
					(else_try),
						(try_for_range, ":cur_center", centers_begin, centers_end),
							(store_faction_of_party, ":fac",":cur_center"),
							
							(party_get_slot, ":besieger", ":cur_center", slot_center_is_besieged_by),
							(try_begin),
								(eq,":fac",":troop_fac"),
								(party_is_active, ":besieger"),
								(call_script, "script_party_set_ai_state", ":party", spai_engaging_army, ":besieger"),
							(else_try),
								(neq,":fac",":troop_fac"),
								(party_slot_eq, ":cur_center", LastFaction, ":troop_fac"),
								# (1,"script_spai_message", 5),
								(call_script, "script_party_set_ai_state", ":party", spai_besieging_center, ":cur_center"),
							(try_end),
						(try_end),
					(try_end),
				(try_end),
			(try_end),
		(try_end),	
	(try_end),
   ]),
   
   (0,0,ti_once,[
   (neq, "$Etap4",0),
   # (faction_slot_eq, Targowica, slot_faction_state, sfs_inactive),
   ],[
   # (assign, reg0, "$FinalWinLevel"),
   
   # (display_message, "@WAR {reg0}", 0xd42121),
		(try_begin),
			
			# (try_begin),(ge, "$_DEBUG", 1),(display_message, "@WinLevel<50", 0xd42121),(try_end),
			(1, "script_diplomacy_start_war_between_kingdoms", Kosciuszkowcy, Rosja, 1),
			(1, "script_diplomacy_start_war_between_kingdoms", Kosciuszkowcy, Prusy, 1),
			(try_begin),
				(lt, "$FinalWinLevel",AustriaAttackLimit),
				(1, "script_diplomacy_start_war_between_kingdoms", Kosciuszkowcy, Austria, 1),
			(else_try),
				(assign, "$Etap4NextAttacker","fac_kingdom_2"),
				(faction_set_slot, Austria, FactionWaves, 0),
			(try_end),
		# (else_try),
			# (eq, "$Wegry",1),
			# (ge, "$FinalWinLevel",50),
			
			# (1, "script_diplomacy_start_peace_between_kingdoms", Kosciuszkowcy, Austria, 0),
			# (1, "script_diplomacy_start_peace_between_kingdoms", Kosciuszkowcy, "fac_kingdom_1", 0),
			# (1, "script_diplomacy_start_war_between_kingdoms", Kosciuszkowcy, Rosja, 1),
			# (1, "script_diplomacy_start_war_between_kingdoms", Kosciuszkowcy, Prusy, 1),
			# (try_begin),(ge, "$_DEBUG", 1),(display_message, "@WinLevel=50", 0xd42121),(try_end),
		# (else_try),
			# (eq, "$Rosja",1),
			# (ge, "$FinalWinLevel",50),
			# (try_begin),(ge, "$cheat_mode", 1),(display_message, "@WinLevel=50 rosja", 0xd42121),(try_end),
			# (1, "script_diplomacy_start_peace_between_kingdoms", Kosciuszkowcy, Rosja, 0),
			# (1, "script_diplomacy_start_peace_between_kingdoms", Kosciuszkowcy, "fac_kingdom_1", 0),
			# (1, "script_diplomacy_start_war_between_kingdoms", Kosciuszkowcy, Austria, 1),
			# (1, "script_diplomacy_start_war_between_kingdoms", Kosciuszkowcy, Prusy, 1),
		# (else_try),
			# (1, "script_diplomacy_start_war_between_kingdoms", Kosciuszkowcy, Rosja, 1),
			# (1, "script_diplomacy_start_war_between_kingdoms", Kosciuszkowcy, Prusy, 1),
			# (str_store_string, s10, "@Rewolucja upada."),
		(try_end),
   ]),
   
   (0,0,0,[
   (check_quest_active, "qst_Zasadzka"),
   (neg|check_quest_succeeded, "qst_Zasadzka"),
   (neg|check_quest_failed, "qst_Zasadzka"),
   (quest_slot_eq, "qst_Zasadzka",slot_quest_current_state,1),
   (quest_get_slot, ":p", "qst_Zasadzka", QuestSlot+3),
   (quest_get_slot, ":z", "qst_Zasadzka",slot_quest_target_center),
   
   (try_begin),
	(eq, "$qmZasadzka", 0),
	(assign, "$qmZasadzka", 1),
	(display_message, "@Wyjście z gry w tym momencie może spowodować błąd.", 0xd42121),
	(try_end),
   
   (store_distance_to_party_from_party, ":dist", ":p", ":z"),
   (le, ":dist", 2),
   (rest_for_hours,0,0,0),
   ],[
   (quest_get_slot, ":z", "qst_Zasadzka",slot_quest_target_center),
   (assign, "$g_encountered_party", ":z"),
   (jump_to_menu,"mnu_q_zasadzka"),
   ]),
   
   
   (1, 28, 0,
   [
   # (assign, ":ok",0),
    # (try_begin),
		(check_quest_active, "qst_Szpieg"),
		(quest_slot_eq, "qst_Szpieg",56,0),
		# (display_message, "@qst Szpieg 1", 0xd42121),
		# (assign, ":ok",1),
	# (else_try),
	# (try_end),
	# (eq, ":ok",1),
    ],
   [
   # (display_message, "@qst Szpieg spawn?", 0xd42121),
    (assign, ":oboz",-1),
	(quest_get_slot, ":oboz", "qst_Szpieg", QuestSlot+0),
	(set_spawn_radius, 0),
	  (spawn_around_party, ":oboz", "pt_qszpieg"),
	  (assign, ":szpiegparty",reg0),
	  (assign, ":closest_town", -1),
	  (assign, ":score_to_beat", 99999),
			
	  (try_for_range, ":town_no", towns_begin, towns_end),
		(store_distance_to_party_from_party, ":distance", ":szpiegparty", ":town_no"),
		(lt, ":distance", ":score_to_beat"),
		(assign, ":closest_town", ":town_no"),
		(assign, ":score_to_beat", ":distance"),
	  (try_end),
	  (quest_get_slot, ":closest_town", "qst_Szpieg", QuestSlot+1),
	  (call_script, "script_party_set_ai_state", ":szpiegparty",  spai_holding_center, ":closest_town"),
	  (quest_set_slot, "qst_Szpieg",55,":szpiegparty"),
	  (quest_set_slot, "qst_Szpieg",56,":closest_town"),
	  
   ]
   ),
   
   
   (1,0,0,[
   (check_quest_active, "qst_Szpieg"),
   # (try_begin),
	  # (1, "script_gtWinLevel",-10),
	  # (assign, "$Przegrana",0),
   # (try_end),
   # (1, "script_leWinLevel",-10),
   ],[
		
		(quest_slot_ge, "qst_Szpieg",55,1),
		# (display_message, "@qst Szpieg 2", 0xd42121),
		(quest_get_slot, ":town","qst_Szpieg",56),
		(quest_get_slot, ":p","qst_Szpieg",55),
		(store_distance_to_party_from_party, ":distance", ":p", ":town"),
		(le, ":distance",2),
		# (display_message, "@qst Szpieg 3", 0xd42121),
		(1,"script_2Etap_quest_failed", "qst_Szpieg"),
   
   # (val_add, "$Przegrana",1),
   # (try_begin),
	# (ge, "$Przegrana",3*24),
	# (str_store_faction_name, s1, "$PowstanieNa"),
    # (str_store_string, s100, "str_rewolucja_upada"),
	# (assign, "$EndGame",1),
			# (display_message, "@5",0xd42121),
			# (start_presentation, "prsnt_letter"),
   # (try_end),
   ]),


#Rebellion changes begin
#move 

#Rebellion changes end

	(1,24,ti_once,
	[
		(check_quest_active, "qst_2Etap"),
		(quest_slot_eq, "qst_2Etap", slot_quest_current_state, 3),
	],[
		(jump_to_menu, "mnu_poslaniec_debreczyn"),
	]),
#NPC system changes begin
#Move unemployed NPCs around taverns
   # (24 * 15 , 0, 0, 
   # [
    # (call_script, "script_update_companion_candidates_in_taverns"),
    # ],
   # []
   # ),

#Process morale and determine personality clashes
  (0, 0, 24,
   [],
[

#Count NPCs in party and get the "grievance divisor", which determines how fast grievances go away
#Set their relation to the player
        (assign, ":npcs_in_party", 0),
        (assign, ":grievance_divisor", 100),
        (try_for_range, ":npc1", companions_begin, companions_end),
            (main_party_has_troop, ":npc1"),
            (val_add, ":npcs_in_party", 1),
        (try_end),
        (val_sub, ":grievance_divisor", ":npcs_in_party"),
        (store_skill_level, ":persuasion_level", "skl_persuasion", "trp_player"),
        (val_add, ":grievance_divisor", ":persuasion_level"),
        (assign, reg7, ":grievance_divisor"),

#        (display_message, "@{!}Process NPC changes. GD: {reg7}"),



##Activate personality clash from 24 hours ago
        (try_begin), #scheduled personality clashes require at least 24hrs together
             (gt, "$personality_clash_after_24_hrs", 0),
             (eq, "$disable_npc_complaints", 0),
             (try_begin),
                  (troop_get_slot, ":other_npc", "$personality_clash_after_24_hrs", slot_troop_personalityclash_object),
                  (main_party_has_troop, "$personality_clash_after_24_hrs"),
                  (main_party_has_troop, ":other_npc"),
                  (assign, "$npc_with_personality_clash", "$personality_clash_after_24_hrs"),
             (try_end),
             (assign, "$personality_clash_after_24_hrs", 0),
        (try_end),
#

         
        (try_for_range, ":npc", companions_begin, companions_end),
###Reset meeting variables
            (troop_set_slot, ":npc", slot_troop_turned_down_twice, 0),
            (try_begin),
                (troop_slot_eq, ":npc", slot_troop_met, 1),
                (troop_set_slot, ":npc", slot_troop_met_previously, 1),
            (try_end),

###Check for coming out of retirement
            (troop_get_slot, ":occupation", ":npc", slot_troop_occupation),
            (try_begin),
                (eq, ":occupation", slto_retirement),
                (troop_get_slot, ":renown_min", ":npc", slot_troop_return_renown),

                (str_store_troop_name, s31, ":npc"),
                (troop_get_slot, ":player_renown", "trp_player", slot_troop_renown),
                (assign, reg4, ":player_renown"),
                (assign, reg5, ":renown_min"),
#                (display_message, "@{!}Test {s31}  for retirement return {reg4}, {reg5}."),

                (gt, ":player_renown", ":renown_min"),
                (troop_set_slot, ":npc", slot_troop_personalityclash_penalties, 0),
                (troop_set_slot, ":npc", slot_troop_morality_penalties, 0),
                (troop_set_slot, ":npc", slot_troop_occupation, 0),
            (try_end),


#Check for political issues
			(try_begin), #does npc's opponent pipe up?
				(troop_slot_ge, ":npc", slot_troop_days_on_mission, 5),
				(troop_slot_eq, ":npc", slot_troop_current_mission, npc_mission_kingsupport),

				(troop_get_slot, ":other_npc", ":npc", slot_troop_kingsupport_opponent),
				(troop_slot_eq, ":other_npc", slot_troop_kingsupport_objection_state, 0),
				
				(troop_set_slot, ":other_npc", slot_troop_kingsupport_objection_state, 1),
				
				(str_store_troop_name, s3, ":npc"),
				(str_store_troop_name, s4, ":other_npc"),

				(try_begin),
					(eq, "$cheat_mode", 1),
					(display_message, "str_s4_ready_to_voice_objection_to_s3s_mission_if_in_party"),
				(try_end),
			(try_end),

			#Check for quitting
            (try_begin),
                (main_party_has_troop, ":npc"),
				
                (call_script, "script_npc_morale", ":npc"),
                (assign, ":npc_morale", reg0),

                (try_begin),
                    (lt, ":npc_morale", 20),
                    (store_random_in_range, ":random", 0, 100),
                    (val_add, ":npc_morale", ":random"),
                    (lt, ":npc_morale", 20),
                    (assign, "$npc_is_quitting", ":npc"),
                (try_end),

				#Reduce grievance over time (or augment, if party is overcrowded
                (troop_get_slot, ":grievance", ":npc", slot_troop_personalityclash_penalties),
                (val_mul, ":grievance", 90),
                (val_div, ":grievance", ":grievance_divisor"),
                (troop_set_slot, ":npc", slot_troop_personalityclash_penalties, ":grievance"),

                (troop_get_slot, ":grievance", ":npc", slot_troop_morality_penalties),
                (val_mul, ":grievance", 90),
                (val_div, ":grievance", ":grievance_divisor"),
                (troop_set_slot, ":npc", slot_troop_morality_penalties, ":grievance"),


				#Change personality grievance levels
                (try_begin),
                    (this_or_next|troop_slot_ge, ":npc", slot_troop_personalityclash_state, 1),
                        (eq, "$disable_npc_complaints", 1),
                    (troop_get_slot, ":object", ":npc", slot_troop_personalityclash_object),
                    (main_party_has_troop, ":object"),
                    (call_script, "script_reduce_companion_morale_for_clash", ":npc", ":object", slot_troop_personalityclash_state),
                (try_end),
                (try_begin),
                    (this_or_next|troop_slot_ge, ":npc", slot_troop_personalityclash2_state, 1),
                        (eq, "$disable_npc_complaints", 1),
                    (troop_get_slot, ":object", ":npc", slot_troop_personalityclash2_object),
                    (main_party_has_troop, ":object"),
                    (call_script, "script_reduce_companion_morale_for_clash", ":npc", ":object", slot_troop_personalityclash2_state),
                (try_end),
                (try_begin),
                    (this_or_next|troop_slot_ge, ":npc", slot_troop_personalitymatch_state, 1),
                        (eq, "$disable_npc_complaints", 1),
                    (troop_get_slot, ":object", ":npc", slot_troop_personalitymatch_object),
                    (main_party_has_troop, ":object"),
                    (troop_get_slot, ":grievance", ":npc", slot_troop_personalityclash_penalties),
                    (val_mul, ":grievance", 9),
                    (val_div, ":grievance", 10),
                    (troop_set_slot, ":npc", slot_troop_personalityclash_penalties, ":grievance"),
                (try_end),


				
#Check for new personality clashes

				#Active personality clash 1 if at least 24 hours have passed
                (try_begin),
                    (eq, "$disable_npc_complaints", 0),
                    (eq, "$npc_with_personality_clash", 0),
                    (eq, "$npc_with_personality_clash_2", 0),
                    (eq, "$personality_clash_after_24_hrs", 0),
                    (troop_slot_eq, ":npc", slot_troop_personalityclash_state, 0),
                    (troop_get_slot, ":other_npc", ":npc", slot_troop_personalityclash_object),
                    (main_party_has_troop, ":other_npc"),
                    (assign, "$personality_clash_after_24_hrs", ":npc"),
                (try_end),

				#Personality clash 2 and personality match is triggered by battles
				(try_begin),
					(eq, "$npc_with_political_grievance", 0),
				
					(troop_slot_eq, ":npc", slot_troop_kingsupport_objection_state, 1),
					(assign, "$npc_with_political_grievance", ":npc"),
				(try_end),

			#main party does not have troop, and the troop is a companion
			(else_try), 
				(neg|main_party_has_troop, ":npc"),
				(eq, ":occupation", slto_player_companion),

				
				(troop_get_slot, ":days_on_mission", ":npc", slot_troop_days_on_mission),
				(try_begin),
					(gt, ":days_on_mission", 0),
					(val_sub, ":days_on_mission", 1),
					(troop_set_slot, ":npc", slot_troop_days_on_mission, ":days_on_mission"),
				(else_try), 
					(troop_slot_ge, ":npc", slot_troop_current_mission, 1),
					
					#If the hero can join
					(this_or_next|neg|troop_slot_eq, ":npc", slot_troop_current_mission, npc_mission_rejoin_when_possible),
						(hero_can_join, ":npc"),
						
					(assign, "$npc_to_rejoin_party", ":npc"),
				(try_end),
            (try_end),
        (try_end),
    ]),


#NPC system changes end

# Lady of the lake achievement
   # (1, 0, 0,
   # [
     # (troop_get_type, ":is_female", "trp_player"),
     # (eq, ":is_female", 1),       
     # (try_for_range, ":companion", companions_begin, companions_end),
       # (troop_slot_eq, ":companion", slot_troop_occupation, slto_player_companion),

       # (troop_get_inventory_capacity, ":inv_cap", ":companion"),
       # (try_for_range, ":i_slot", 0, ":inv_cap"),
         # (troop_get_inventory_slot, ":item_id", ":companion", ":i_slot"),

		 # (ge, ":item_id", 0),

	 	 # (this_or_next|eq, ":item_id", "itm_great_sword"),
	 	 # (this_or_next|eq, ":item_id", "itm_sword_two_handed_a"),
		 # (eq, ":item_id", "itm_strange_great_sword"),
		 		 
		 # (unlock_achievement, ACHIEVEMENT_LADY_OF_THE_LAKE),
		 # (assign, ":inv_cap", 0),
	   # (try_end),
	 # (try_end),
    # ],
   # []
   # ),



(24,0,0,[],
[
(try_for_range, ":party", towns_begin, villages_end),
	(store_faction_of_party, ":p", ":party"),
	(try_begin),
		(eq, ":p", Kosciuszkowcy),
		(party_get_slot, ":slot", ":party", DniOdPrzejeciaPrzezKosciuszkowcow),
		(val_add, ":slot", 1),
		(party_set_slot, ":party", DniOdPrzejeciaPrzezKosciuszkowcow, ":slot"),
	(else_try),
		(party_set_slot, ":party", DniOdPrzejeciaPrzezKosciuszkowcow, 0),
	(try_end),
(try_end),
]),
# (1,0,0,[(eq,0,1),(eq,"$Etap4",1),],
# [

# (party_slot_ge, "p_town_2", DniOdPrzejeciaPrzezKosciuszkowcow, 1),
# (party_slot_ge, "p_town_3", DniOdPrzejeciaPrzezKosciuszkowcow, 1),
# (party_slot_ge, "p_town_4", DniOdPrzejeciaPrzezKosciuszkowcow, 1),
# (ge, "$StratyRosji", LimitWojsk),
# (ge, "$StratyPrus", LimitWojsk),
# (ge, "$StratyAustrii", LimitWojsk),
# (store_add, ":slotrosja", DiplBegin, Kosciuszkowcy),
# (neg|faction_slot_eq, Rosja, ":slotrosja", DiplPeace),
# (store_add, ":slotk", DiplBegin, Rosja),
# (neg|faction_slot_eq, Kosciuszkowcy, ":slotk", DiplPeace),
# (call_script, "script_diplomacy_start_peace_between_kingdoms", Rosja, Kosciuszkowcy, 1),
# (call_script, "script_diplomacy_start_peace_between_kingdoms", Prusy, Kosciuszkowcy, 1),
# (call_script, "script_diplomacy_start_peace_between_kingdoms", Austria, Kosciuszkowcy, 1),
# (jump_to_menu, "mnu_end_game"),
# ]),

(1,0,0,[],[
(try_begin),
	(eq,"$Szpieg",Patrol),
	(store_distance_to_party_from_party, ":dist","$SzpiegParty","$SzpiegCel"),
	(le, ":dist", 5),
	(assign, "$Szpieg",Patrolling),
(else_try),
	(eq,"$Szpieg",Wraca),
	(store_distance_to_party_from_party, ":dist","$SzpiegParty","p_main_party"),
	(le, ":dist", 3),
	(neq, "$g_player_is_captive", 1),
	(party_stack_get_troop_dna, ":dna","$SzpiegParty",0),
	(start_map_conversation, "trp_szpieg",":dna"),
(try_end),
]),

(1,24,0,[(eq,"$Szpieg",Patrolling)],[
(assign, "$Szpieg",Wraca),
(call_script, "script_party_set_ai_state", "$SzpiegParty", spai_patrolling_around_center, "p_main_party"),
]),

(0.1,0,0,[(eq,"$Szpieg",Wraca)],[
(call_script, "script_party_set_ai_state", "$SzpiegParty", spai_accompanying_army, "p_main_party"),
]),

(1, int(24*4.5),ti_once,[(eq, 2, 1)],[
	(try_for_range, ":lord", lords_begin, lords_end),
		(troop_slot_eq, ":lord", 14, 1),
		(troop_set_slot, ":lord", GrupaAtaku, "p_castle_55"),
		# (troop_get_slot, ":party", ":lord", slot_troop_leaded_party),
		# (1,"script_party_set_ai_state", ":party", spai_patrolling_around_center, "p_castle_46"),
	(try_end),
]),


(1,18,0,[(eq, "$Szpieg",Dywersja)],[
(store_random_in_range, ":r", 0,100),
(store_random_in_range, ":r2", 0,100),
(assign,reg10,":r"),
# (display_message, "@{reg10}",0xffff00),
(try_begin),
	# (lt, ":r",30),
	(eq, ":r", ":r"),
	(assign, "$Szpieg",WysadzilBrame),
	(start_map_conversation, "trp_szpieg"),
(else_try),
	(ge, ":r",30),
	(lt, ":r2", 50),
	(assign, "$Szpieg", Failed),
	(start_map_conversation, "trp_szpieg"),
(else_try),
	(assign, "$Szpieg", Dead),
(try_end),
]),

(1,36,0,[(eq, "$Szpieg",Dead)],[
(assign, "$Szpieg",0),
(display_message, "@Szpieg nie powrocil, najprawdopodobniej wpadl w rece wroga.",0xff0000),
]),

# (72,0,0,[],
# [



# ]),

# (1,24*40,ti_once,[
# (this_or_next|eq, "$Powstanie", 1),
# (faction_slot_eq, Targowica, CSlotFactionCastles, 0),
# (faction_slot_eq, Rosja, slot_faction_state, sfs_active),
# (faction_slot_eq, Kosciuszkowcy, slot_faction_state, sfs_active),
# ],
# [
# (faction_slot_eq, Rosja, slot_faction_state, sfs_active),
# (faction_slot_eq, Kosciuszkowcy, slot_faction_state, sfs_active),
# (store_add, ":slotrosja", DiplBegin, Kosciuszkowcy),
# (neg|faction_slot_eq, Rosja, ":slotrosja", DiplWar),
# (call_script, "script_diplomacy_start_peace_between_kingdoms", Rosja, Kosciuszkowcy, 1),
# (assign, "$RZ", 1),
# ]),

 
]
